#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Nov  8 08:21:28 2024

@author: c415sc415s
"""
#視窗化介面
#BMR
import tkinter as tk
import math
import numpy as np
import re
#視窗基礎設定
nutri_win=tk.Tk()
nutri_win.title('今天吃啥？！')
screenwidth=nutri_win.winfo_screenwidth()
screenheight=nutri_win.winfo_screenheight()
size='%dx%d+%d+%d'%(1200,1000,(screenwidth-1200)/2,(screenheight-1000)/2)
nutri_win.resizable(False,False)
nutri_win.geometry(size)
#建立輸入基礎資訊之框架頁面
basic_info=tk.Frame(nutri_win,width=1000,height=500)
#建立輸入圖層資訊之框架頁面
nutrition_info=tk.Frame(nutri_win,width=1000,height=500)
#建立BMR之互動式擷取標籤
name=tk.StringVar()

num_weight=tk.DoubleVar()
num_height=tk.DoubleVar()
num_age=tk.DoubleVar()
num_bfp=tk.DoubleVar()
sex=tk.StringVar()
num_bmr=tk.StringVar()
#建立TDEE之互動式擷取標籤
act_factor=tk.DoubleVar()
pre_factor=tk.DoubleVar()
num_tdee=tk.StringVar()
#建立HEXAGON之互動式擷取標籤
word_0=tk.StringVar()
word_1=tk.StringVar()
word_2=tk.StringVar()
word_3=tk.StringVar()
word_4=tk.StringVar()
word_5=tk.StringVar()

word_0.set(['大麥仁', '大麥片', '大麥仁粉', '小米', '糯小米', '小麥', '小麥胚芽', '去筋麵粉', '低筋麵粉', '中筋麵粉', '高筋麵粉', '高筋麵粉(2021年取樣)', '全麥麵粉', '雜糧中筋麵粉', '雜糧高筋麵粉', '白玉米', '紫玉米', '甜玉米', '雙色水果玉米', '糯玉米', '冷凍玉米粒', '玉米筍', '乾玉米粒', '玉米胚芽', '玉米粉', '秈米平均值', '秈米(台中在來2號)', '秈米(台中秈10號)', '稉米平均值', '稉米(台中189號)', '稉米(台南11號)', '稉米(台稉2號)', '稉米(台稉8號)', '稉米(台稉9號)', '稉米(台農71號)', '稉米(高雄139號)', '稉米(高雄142號)', '稉米(高雄145號)', '稉米(高雄139號)(2021年取樣)', '越光米', '秈型糯米(台中糯70號)', '稉型糯米平均值', '稉型糯米', '稉型糯米(台稉糯1號)', '野生紅米', '紅糯糙米', '黑秈糯糙米', '胚芽秈米(台中秈10號)', '胚芽稉米平均值', '胚芽稉米(台稉10號）', '胚芽稉米(台稉9號)', '發芽稉米平均值', '發芽稉米(台稉71號)', '發芽稉米(台稉9號）', '糙秈米', '糙稉米平均值', '糙稉米(台稉71號)', '糙稉米(台稉9號)', '黑秈糙米', '加鈣米', '高纖米', '五穀米', '米胚芽', '秈米粉', '糙米粉', '白糯米粉', '白飯', '高梁', '糯高梁', '黑麥片', '燕麥', '燕麥片', '即食燕麥片', '蕎麥(甜蕎)', '蕎麥麵(乾)', '蕎麥麵(濕)', '薏仁', '糙薏仁', '薏仁粉', '紅藜麥', '台灣藜(紅)(帶殼)', '淮山', '山藥平均值', '山藥(二刺)', '山藥(大汕1號)', '山藥(大汕3號)', '山藥(大刺)', '山藥(中國長品)', '山藥(台農1號)', '山藥(台農2號)', '山藥(白皮削)', '山藥(尖石原生種)', '山藥(宜蘭原生種)', '山藥(花蓮3號)', '山藥(青森)', '山藥(高田)', '山藥(白肉)', '紫山藥', '木薯粉', '白皮甘藷', '菱角牛奶甘藷', '芋心甘藷', '紅肉甘藷', '金時甘藷', '黃肉甘藷', '甘藷粉', '油炸脫水甘藷', '芋頭', '小芋頭(山芋)', '檳榔心芋', '檳榔心芋(2021年取樣)', '冷凍芋頭塊', '芋頭粉', '豆薯', '紅馬鈴薯(粉紅珍珠馬鈴薯)', '馬鈴薯', '馬鈴薯(2022年取樣)', '小馬鈴薯(珍珠馬鈴薯)', '馬鈴薯粉', '荸薺', '荸薺粉', '蓮藕', '熟蓮藕', '熟蓮藕切片(水煮)', '蓮藕粉', '菱角(生)', '菱角仁(生)', '菱角(熟)', '蒟蒻粉', '方糖', '冰糖', '紅砂糖', '黑砂糖', '麥芽糖', '果糖', '果寡糖', '楓糖', '蜂蜜(冬蜜)', '蜂蜜(春蜜)', '黑糖蜜', '冬瓜糖磚', '冷藏寧波年糕', '冷藏甜年糕', '冷藏廣式芋頭粿', '冷藏廣式蘿蔔糕', '包餡甜麻糬(紅豆)', '鹹麻糬', '芋仔餅', '月餅(棗泥)', '綠豆凸', '蕃薯餅', '車輪餅(紅豆)', '車輪餅(菜脯)', '太陽餅', '牛舌餅', '蛋黃芋頭酥', '蛋黃酥', '鳳梨酥', '蘿蔔酥', '鳳眼糕', '米粩', '可頌', '泡芙(巧克力)', '蛋塔', '蛋塔(葡式)', '鬆餅', '冷凍馬拉糕', '銅鑼燒', '冷凍馬蹄條', '乳酪蛋糕', '海綿蛋糕(圓形)', '提拉米蘇(圓形)', '蜂蜜蛋糕(原味)', '蜂蜜蛋糕(巧克力)', '蜂蜜蛋糕(起司)', '黑森林蛋糕', '土司', '土司(含全穀粉)', '紅豆土司', '奶酥麵包', '肉鬆麵包', '蜜糖甜甜圈(波/摩堤)', '糖粒甜甜圈(油炸)', '菠蘿麵包', '葡萄乾奶酥麵包', '漢堡包', '餐包', '雙胞胎麵包', '仙草凍', '仙草凍(2020取樣)', '咖啡凍', '果凍', '原味愛玉凍', '檸檬愛玉凍', '粉粿', '鮮奶布丁', '烤布丁', '黃布丁', '豆花(花生)', '傳統豆花(未加糖)', '羊羹', '巧克力冰淇淋', '香草冰淇淋', '紅豆牛奶冰棒', '花生仁湯', '方塊酥', '夾心餅乾(草莓)', '捲心酥', '蛋捲(芝麻)', '煎餅', '營養口糧', '蘇打餅乾(蔬菜)', '玉米餅乾(原味)', '洋芋片', '魚酥', '零食泡麵', '雪餅', '沙其馬', '牛奶巧克力', '花生牛奶巧克力', '榛果牛奶巧克力', '糖衣牛奶巧克力', '白巧克力風味糖', '黑巧克力(85%)', '白芝麻糖', '黑芝麻糖', '花生糖', '花生貢糖', '牛軋糖', '核棗糕', '水果軟糖', '水果QQ軟糖', '牛奶軟糖', '巧克力牛奶軟糖', '太妃糖', '蓮藕糖', '枇杷糖', '苦茶糖', '薑糖', '巧克力夾心糖', '維生素C口含錠(檸檬)', '酵母菌咀嚼錠', '乳酸球', '羊乳片', '紅豆球', '綠豆球', '棉花糖', '甘薯蜜餞', '芒果青', '芭樂果乾', '鳳梨果乾', '檸檬果乾', '豆干丁(五香)', '豆干片(沙茶)', '布丁粉', '冰淇淋粉(香草)', '起酥片', '糙秈米漿'])
word_1.set(['白鳳豆平均值', '白鳳豆(台灣)', '白鳳豆(進口)', '米豆', '花豆', '紅豆', '紅雲豆(大紅豆)', '青仁黑豆', '黃仁黑豆', '黑豆胚芽', '烘烤黑豆', '黑豆粉', '毛綠豆', '綠豆', '綠豆仁', '綠豆粉', '豇豆(莢)', '萊豆仁(帶膜)', '萊豆仁(去膜)', '粉豆莢', '敏豆莢', '冷凍菜豆(莢)', '毛豆仁', '毛豆莢', '冷凍毛豆仁', '黃豆', '黃豆胚芽', '黃豆粉', '黃豆粉(有機)', '豆漿(無糖)', '豌豆仁', '豌豆莢', '高山大豌豆莢', '甜豌豆莢', '冷凍豌豆仁', '鵲豆莢', '紅扁豆仁', '鷹嘴豆', '樹豆(白)', '翼豆', '天貝(黃豆)', '牛小排平均值', '去骨牛小排', '帶骨牛小排', '無骨牛小排(美牛)', '牛肋條', '牛肋條(2021年取樣)', '沙朗牛排', '板腱 ', '牛去骨肩胛小排', '牛前胸肉', '牛修清前胸肉', '去骨紐約克牛排', '腓力牛排', '牛後腿肉', '牛後腿股肉', '牛後腿腱子心', '牛後腿腱子心(2022年取樣)', '牛肉火鍋片平均值', '牛五花肉火鍋片', '牛紐約客火鍋片', '牛梅花肉火鍋片', '牛嫩肩里肌火鍋片', '牛肚平均值', '牛肚(瘤胃)', '牛肚切片(瘤胃)', '牛肚(蜂巢胃)', '牛筋', '山羊帶皮羊肉塊', '山羊前腿肉片', '山羊後腿肉火鍋片', '綿羊肉切片', '法式羊排', '去骨肩頸眼羊肉', '小羊腰脊肉', '綿羊腹脅肉火鍋片', '豬下肩肉', '豬下肩瘦肉', '豬上肩肉', '豬肩胛肉', '豬肩胛排', '豬肩胛排(2021年取樣)', '豬前腿外腱肉', '豬後腿外腱肉', '豬後腿肉', '豬後腿瘦肉', '豬大里肌', '豬大排', '豬小排', '僧帽肌', '豬小里肌', '豬去皮腹脇肉', '豬帶皮腹脇肉', '豬腹脇排', '豬肝連', '豬頰肉', '豬頰肉(2022年取樣)', '豬頸肉', '豬絞肉平均值', '豬絞肉(70％瘦肉率)', '豬絞肉(90％瘦肉率)', '豬心', '豬白管', '豬皮', '豬耳', '豬舌', '豬血', '豬尾', '豬肝', '豬肚', '熟豬肚', '豬油渣', '豬骨湯平均值', '豬大骨湯', '豬肋骨湯', '豬肩骨湯', '豬軟骨', '豬腎', '豬脾臟', '豬大腸', '豬小腸', '豬空腸', '豬前腳', '豬後腳', '豬蹄膀', '豬腳筋', '豬腦', '土雞', '肉雞', '烏骨雞', '里肌肉平均值', '里肌肉(土雞)', '里肌肉(肉雞)', '帶骨去皮對切胸(肉雞)', '帶骨帶皮對切胸(肉雞)', '去皮清肉平均值', '去皮清肉(土雞)', '去皮清肉(肉雞)', '骨腿平均值', '骨腿(土雞)', '骨腿(肉雞)', '清腿平均值', '清腿(土雞)', '清腿(肉雞)', '棒棒腿平均值', '棒棒腿(土雞)', '棒棒腿(肉雞)', '雞排平均值', '雞排(土雞)', '雞排(肉雞)', '雞排(肉雞)(2021年取樣)', '去皮去骨雞腿(肉雞)', '二節翅平均值', '二節翅(土雞)', '二節翅(肉雞)', '三節翅平均值', '三節翅(土雞)', '三節翅(肉雞)', '翅腿(肉雞)', '雞絞肉', '雞心(肉雞)', '雞心(肉雞)(2021年取樣)', '雞尾椎', '雞肝(肉雞)', '雞胗(肉雞)', '雞胸骨湯', '雞睪丸', '雞腳(肉雞)', '雞膝軟骨(肉雞)', '雞皮(肉雞)', '太空鴨', '番鴨', '太空鴨(去皮)', '土番鴨', '櫻桃鴨胸肉片', '鴨腿', '鴨血', '鴨胗', '去骨鴨掌', '鴨腸', '鴨翅', '鴨頭', '鴨舌', '鵝肉', '鵝胸肉', '鵝腿肉', '鵝心', '鵝肝', '鵝胗', '鵝腸', '火雞肉', '鴕鳥菲力肉排', '鴕鳥沙朗肉排', '鴕腱肉', '鴕腩肉', '山豬肉片', '虎皮蛙', '蛇肉', '雙髻鯊', '雙髻鯊腹肉', '鯊魚切片', '魟魚', '日本鰻鱺魚片(生)', '灰海鰻', '魩仔魚', '魩仔魚平均值(加工)', '魩仔魚(加工,大)', '魩仔魚(加工,小)', '魩仔魚(加工)', '日本銀帶鯡', '日本銀帶鯡(加工)', '日本銀帶鯡魚干(丁香魚脯)', '虱目魚平均值(去皮)', '虱目魚(2月)', '虱目魚(5月)', '虱目魚(8月)', '虱目魚(9月)', '虱目魚(12月)', '虱目魚(含皮)', '虱目魚(2022年取樣)', '虱目魚腹肉(虱目魚肚)', '草魚切片', '草魚(含皮)', '鯉', '鱅', '鬍鯰', '斑海鯰', '長體油胡瓜魚', '香魚', '銀魚', '白肉鮭魚切片', '紅肉鮭魚切片', '大西洋鮭魚平均值(去皮)', '大西洋鮭魚(台灣養殖)', '大西洋鮭魚切片(中段)', '大西洋鮭魚切片(尾段)', '大西洋鮭魚生魚片', '大西洋鮭魚腹肉', '麥奇鈎吻鮭(去皮)', '麥奇鈎吻鮭(含皮)', '姬魚', '印度鐮齒魚', '狗母魚(蛇鯔)', '鮟鱇', '鯔平均值(去皮)', '鯔(2月)', '鯔(4月)', '鯔(8月)', '鯔(11月,雄魚)', '鯔(11月,雌魚)', '鯔(12月,雄魚)', '鯔(12月,雌魚)', '鯔切片', '鯔(含皮)', '斑鰭飛魚', '斑鱵', '鱷形叉尾鶴鱵', '金鱗魚', '鱗馬鞭魚', '黃鱔', '石狗公', '環紋簑鮋', '深海鱗角魚', '尖嘴鱸(去皮)', '尖嘴鱸(含皮)', '日本花鱸平均值', '日本花鱸(2月)', '日本花鱸((3月)', '日本花鱸((8月)', '日本花鱸((11月)', '日本花鱸((12月)', '日本花鱸(含皮)', '白鱸', '條紋狼鱸', '鱖', '白緣星鱠', '青星九刺鮨平均值', '青星九刺鮨', '青星九刺鮨魚片', '斑帶石斑魚', '龍虎石斑魚', '斑點九刺鮨(去皮)', '斑點九刺鮨(含皮)', '棕點石斑魚', '鞍帶石斑魚片', '駝背鱸', '橫紋九刺鮨', '大口黑鱸', '日本紅目大眼鯛', '血斑異大眼鯛', '多鱗沙鮻', '日本馬頭魚', '白馬頭魚', '鬼頭刀魚片', '鬼頭刀', '海鱺', '海鱺魚片', '大口逆鈎鰺', '大甲鰺', '日本竹筴魚', '布氏鯧鰺(去皮)', '布氏鯧鰺(含皮)', '杜氏鰤', '長鰭鰤魚', '范氏副葉鰺', '泰勃圓鰺', '烏鯧', '無斑圓鰺', '藍圓鰺', '雙帶鰺', '眼眶魚', '斯氏長鰭烏魴', '史氏紅諧魚', '希氏姬鯛', '赤鰭笛鯛', '孟加拉笛鯛', '前鱗笛鯛', '馬拉巴笛鯛', '單斑笛鯛', '黃擬烏尾鮗', '葉唇笛鯛', '松鯛', '三線磯鱸', '星雞魚', '密點少棘胡椒鯛', '金線魚', '青嘴龍占魚', '網紋龍占魚', '平鯛', '阿部牙鯛', '真鯛平均值(去皮)', '真鯛(1月)', '真鯛(3月)', '真鯛(5月)', '真鯛(8月)', '真鯛(9月)', '真鯛(11月)', '黃鰭棘鯛', '黑棘鯛(去皮)', '黑棘鯛(含皮)', '多鱗四指馬鮁', '大黃魚', '小黃魚(去皮)', '小黃魚(含皮)', '白姑魚', '眼斑擬石首魚', '黃姑魚', '黑䱛 ', '鮸', '鱗鰭叫姑魚', '黑斑海緋鯉', '斑點雞籠鯧', '花身鯻', '花尾唇指翁(翁加魚邊) ', '尼羅口孵非鯽(去皮)', '尼羅口孵非鯽(含皮)', '尼羅口孵非鯽(含皮)(2022年取樣)', '花身副麗魚', '紅色吳郭魚', '台灣鯛魚片(生)', '台灣鯛魚片(生)(2021年)', '台灣鯛魚片(水煮)', '台灣鯛魚片(油煎)', '台灣鯛魚片(烤,190℃,10分鐘)', '台灣鯛魚片(烤,190℃,20分鐘)', '台灣鯛魚片(烤,230℃,10分鐘)', '台灣鯛魚片(烤,230℃,20分鐘)', '台灣鯛魚片(清蒸)', '台灣鯛魚片(微波)', '台灣鯛魚湯(水煮)', '莫三比克口孵非鯽', '薔薇項鰭魚(去皮)', '薔薇項鰭魚(含皮)', '藍豬齒魚', '福氏鸚哥魚(去皮)', '橫紋鸚哥魚(含皮)', '藍點鸚哥魚', '金錢魚', '褐臭肚魚', '杜氏刺尾鯛', '後刺尾鯛', '鋸尾鯛', '大眼金梭魚', '鱗網帶鰆切片', '鱗網帶鰆(含皮)', '白帶魚', '大目鮪', '正鰹', '花腹鯖', '高麗馬加鰆', '康氏馬加鰆切片(去皮)', '康氏馬加鰆切片(含皮)', '臺灣馬加鰆', '鮪魚生魚片', '鯖魚(生)', '鯖魚(炒)', '鯖魚(炸)', '鯖魚(烤,150度,10分)', '鯖魚(烤,150度,20分)', '鯖魚(烤,150度,30分)', '鯖魚(烤,180度,10分)', '鯖魚(烤,210度,10分)', '鯖魚(煮)', '鯖魚(煎)', '鯖魚(蒸)', '旗魚切片', '旗魚腹肉', '刺鯧(去皮)', '刺鯧(含皮)', '星斑真鯧', '銀鯧平均值(去皮)', '銀鯧(2月)', '銀鯧(3月)', '銀鯧(5月)', '銀鯧(8月)', '銀鯧(12月)', '銀鯧(含皮)', '斑鱧', '大口鰜切片(含皮)', '鰈魚切片', '雙線鬚鰨', '單角革單棘魨(去皮)', '單角革單棘魨(含皮)', '克氏兔頭魨', '翻車魨腹肉', '犬牙南極魚切片', '低眼無齒芒魚片(芒加魚邊)', '秋刀魚', '圓鱈魚鰓肉', '鯛魚下巴', '鯊魚翅', '魚翅唇', '翻車魨魚皮', '鯊魚皮', '魚漿(旗魚)', '鮸魚卵(加工)', '鯔魚卵', '鰆魚卵', '鰹魚卵', '鯔魚精囊', '鮟鱇魚肝', '旗魚肚', '鮪魚肚', '小魚干', '扁魚干', '柴魚片', '羅氏沼蝦', '北方長額蝦(加工)', '東方異腕蝦', '胭脂蝦', '日本玻璃蝦', '相模後海螯蝦', '中國對蝦', '日本對蝦平均值', '日本對蝦(大)', '日本對蝦(小)', '白對蝦平均值', '白對蝦(大)', '白對蝦(小)', '白對蝦(小)(2022年取樣)', '哈氏彷對蝦', '草對蝦', '藍對蝦', '鬚赤蝦', '大管鞭蝦', '隆脊管鞭蝦', '螳螂蝦', '日本龍蝦', '正櫻蝦(生)', '正櫻蝦(熟)', '正櫻蝦乾', '大頭蝦仁', '明蝦仁', '紅蝦仁', '海鱸蝦仁', '草蝦仁', '鳳尾蝦仁', '鬚赤蝦仁', '蝦皮', '蝦米', '金鉤蝦乾', '紅蟳', '蛙形蟹', '蟹腳肉', '竹蟶(冷凍)', '真牡蠣平均值', '真牡蠣', '帶殼真牡蠣(生蠔)', '黑齒牡蠣', '蝦夷海扇蛤', '綠殼菜蛤', '綠殼菜蛤干', '西施舌', '台灣蜆', '大文蛤', '文蛤', '波紋橫簾蛤 ', '菲律賓簾蛤', '環文蛤', '干貝(冷凍)', '干貝(乾)平均值', '干貝(乾)', '珠貝(乾)', '牡蠣干', '真烏賊平均值', '真烏賊(大)', '真烏賊(小)', '章魚', '阿根廷魷', '泡魷魚', '台灣鎖管', '尖鎖管 ', '軟翅仔', '香螺 ', '象牙鳳螺', '泥螺', '雪螺', '九孔螺', '鮑魚', '蝸牛肉', '烏賊精囊', '小卷干', '白海參', '仿刺參', '南美刺參', '紅海參', '黑烏參', '海蜇皮', '雞蛋平均值', '雞蛋(白殼)', '雞蛋(黃殼)', '土雞蛋', '土雞蛋(2022年取樣)', '烏骨雞蛋', '雞蛋(高DHA)', '雞蛋(高次亞麻油酸)', '雞蛋(高亞麻油酸)', '初卵雞蛋', '雞蛋(高維生素A&E)', '雞蛋(高維生素E)', '雞蛋白平均值', '雞蛋白(白殼)', '雞蛋白(黃殼)', '烏骨雞蛋白', '雞蛋黃平均值', '雞蛋黃(白殼)', '雞蛋黃(黃殼)', '烏骨雞蛋黃', '雞蛋黃(高維生素E)', '溫泉蛋', '雞水煮蛋', '雞水煮蛋白', '雞水煮蛋黃', '茶葉蛋平均值', '茶葉蛋(市售)', '茶葉蛋(浸泡隔夜)', '茶葉蛋白(浸泡隔夜)', '茶葉蛋黃(浸泡隔夜)', '雞皮蛋平均值', '雞皮蛋', '土雞皮蛋', '滷蛋平均值', '雞滷蛋(市售)', '雞滷蛋(現煮)', '雞滷蛋(浸泡隔夜)', '滷蛋白平均值', '雞滷蛋白(現煮)', '雞滷蛋白(浸泡隔夜)', '滷蛋黃平均值', '雞滷蛋黃(現煮)', '雞滷蛋黃(浸泡隔夜)', '雞鐵蛋', '雞水波蛋', '荷包蛋(不加油)', '荷包蛋(加油1小匙)', '煎蛋(不加油)', '炒蛋(加油3大匙)', '蒸蛋平均值', '蒸蛋(市售)', '蒸蛋(微波爐)', '蒸蛋(電鍋)', '鴨蛋', '紅面番鴨蛋', '鴨蛋白', '鴨蛋黃', '鴨皮蛋', '鴨鹹蛋平均值', '鴨生鹹蛋', '鴨熟鹹蛋', '鴨熟鹹蛋(薄鹽)', '鴨鹹蛋黃', '鵪鶉蛋', '鵪鶉水煮蛋', '鵪鶉皮蛋', '鵪鶉鹹蛋', '鵪鶉滷蛋', '鵪鶉鐵蛋', '鴿蛋', '鵝蛋'])
word_2.set(['高脂鮮乳', '全脂鮮乳平均值', '全脂鮮乳(1月取樣)', '全脂鮮乳(4月取樣)', '全脂鮮乳(6月取樣)', '全脂鮮乳(9月取樣)', '全脂鮮乳(10月取樣)', '全脂鮮乳(11月取樣)', '全脂鮮乳(12月取樣)', '全脂鮮乳(7月取樣)', '中脂鮮乳', '低脂鮮乳', '高脂強化鮮乳(鈣強化)', '高脂強化鮮乳(寡醣強化)', '中脂強化鮮乳(脂肪酸調整)', '低脂強化鮮乳(維生素E強化)', '低脂強化鮮乳(寡醣強化)', '脫脂強化鮮乳(鈣強化)', '脫脂強化鮮乳(寡醣強化)', '脫脂強化鮮乳(鐵強化)', '中脂調味乳(巧克力)', '中脂調味乳(多穀類)', '中脂調味乳(果汁)', '中脂調味乳(鈣強化)', '中脂調味乳(維生素強化)', '中脂調味乳(纖維&維生素E強化)', '低脂調味乳(木瓜)', '高脂保久乳', '全脂保久乳', '中脂保久乳', '低脂強化保久乳(寡糖強化)', '中脂調味保久乳(巧克力)', '中脂調味保久乳(布丁)', '全脂奶粉', '部份脫脂奶粉', '部份脫脂奶粉(即溶)', '部份脫脂低乳糖奶粉', '脫脂奶粉', '脫脂奶粉(即溶)', '全脂強化奶粉(纖維強化)', '部份脫脂強化奶粉(鈣強化)', '部份脫脂強化奶粉(纖維&DHA強化)', '部份脫脂強化奶粉(纖維&鈣強化)', '部份脫脂強化奶粉(脂肪酸調整)', '脫脂強化奶粉(抗氧化)', '脫脂強化奶粉(鈣&維生素A強化)', '脫脂強化奶粉(鈣&維生素C,E強化)', '脫脂強化奶粉(鈣&鐵強化)', '部份脫脂調味奶粉(巧克力)', '部份脫脂調味奶粉(果汁)', '脫脂稀釋發酵乳', '脫脂稀釋發酵乳(鈣強化)', '全脂濃稠發酵乳', '中脂濃稠發酵乳', '中脂濃稠發酵乳(無糖&纖維強化)', '中脂濃稠發酵乳(草莓)', '低脂濃稠發酵乳', '脫脂濃稠發酵乳', '脫脂濃稠發酵乳(低熱量)', '脫脂濃稠發酵乳(草莓)', '脫脂濃稠發酵乳(啤酒酵母)', '高脂凝態發酵乳(纖維強化)', '全脂凝態發酵乳', '中脂凝態發酵乳(草莓)', '中脂凝態發酵乳(蘆薈)', '脫脂凝態發酵乳(纖維強化)', '脫脂保久稀釋發酵乳', '脫脂保久濃稠發酵乳(草莓&蘋果)', '淡煉乳', '加糖部份脫脂煉乳', '切片乾酪', '切片乾酪(低脂)', '刨絲乾酪', '乾酪粉', '鮮奶可可', '木瓜牛奶', '高脂鮮羊乳', '中脂鮮羊乳', '保久羊乳', '中脂調味保久羊乳(巧克力)', '中脂調味保久羊乳(果汁)', '全脂羊奶粉', '全脂羊奶粉(即溶)'])
word_3.set(['牛蒡', '胡蘿蔔平均值', '胡蘿蔔', '向陽二號胡蘿蔔', '澳洲胡蘿蔔(細長型)', '黃胡蘿蔔', '冷凍胡蘿蔔', '根菾菜根', '根菾菜根(2023年取樣)', '白蘿蔔平均值', '白蘿蔔', '白蘿蔔(長形)', '櫻桃蘿蔔', '青蘿蔔', '蘿蔔乾', '百合鱗片', '乾百合鱗片', '芋莖', '金針菜嫩莖', '草石蠶', '球莖甘藍', '孟宗竹筍', '熟桂竹筍', '烏殼綠竹筍', '茭白筍', '麻竹筍', '冷凍麻竹筍', '綠竹筍', '帶殼熟綠竹筍', '沙拉筍塊', '熟箭竹筍', '白蘆筍', '綠蘆筍平均值', '綠蘆筍', '澳洲綠蘆筍(粗短型)', '綠蘆筍(細短型)', '綠蘆筍(短型)', '蘆筍花', '嫩莖萵苣', '嫩薑', '粉薑', '老薑', '檳榔嫩莖', '大蒜', '青蒜', '蒜苗', '青蔥平均值', '青蔥', '山東大蔥', '日本甜蔥', '宜蘭粉蔥', '白洋蔥', '紫洋蔥', '黃洋蔥', '紅蔥頭', '韮菜花', '韮菜', '韮黃', '九層塔', '小麥苗', '水菜(日本種)', '甘藍平均值', '梨山甘藍(尖球形)', '甘藍(扁圓形)', '甘藍(圓球形)', '甘藍(圓球形)(2021年取樣)', '紫色甘藍', '甘藍芽', '冷凍甘藍', '羽衣甘藍(有機)', '脫水甘藍', '甘藷葉', '蚵仔白菜(2022年取樣)', '荷葉白菜', '葵扇白菜', '黑葉白菜(短梗)', '千寶菜', '土植小白菜(1月取樣)', '土植小白菜(3月取樣)', '土植小白菜(4月取樣)', '土植小白菜(7月取樣)', '土植小白菜(10月取樣)', '水耕小白菜(1月取樣)', '水耕小白菜(4月取樣)', '水耕小白菜(7月取樣)', '水耕小白菜(10月取樣)', '有機小白菜(1月取樣)', '有機小白菜(4月取樣)', '有機小白菜(7月取樣)', '有機小白菜(10月取樣)', '珍珠小白菜', '油菜心', '油菜', '土植青江菜(1月取樣)', '土植青江菜(3月取樣)', '土植青江菜(4月取樣)', '土植青江菜(7月取樣)', '土植青江菜(10月取樣)', '水耕青江菜(1月取樣)', '水耕青江菜(4月取樣)', '水耕青江菜(7月取樣)', '水耕青江菜(10月取樣)', '有機青江菜(1月取樣)', '有機青江菜(4月取樣)', '有機青江菜(7月取樣)', '有機青江菜(10月取樣)', '塔菇菜(有機)', '廣島野菜', '結球白菜平均值', '煙台白菜', '迷你竹筍白菜', '翠玉白菜', '包心白菜', '白菜芽', '白鳳菜', '紅鳳菜', '豆瓣菜', '明日葉', '山芹菜', '芹菜平均值', '芹菜(青梗)', '芹菜', '西洋芹菜', '大心芥菜', '大芥菜', '包心芥菜', '芥菜平均值', '芥菜', '雪裡蕻', '抱子芥菜', '芥藍菜', '芥藍芽', '芫荽', '紅梗珍珠菜', '食茱萸', '香樁', '茴香', '馬齒莧', '茼蒿', '日本茼蒿(有機)', '昭和草', '隼人瓜苗', '白莧菜', '紅莧菜', '野莧菜', '紫蘇', '菠菜', '菠菜(葉)', '冷凍菠菜', '菾菜', '黃金菾菜', '落葵', '藤三七', '不結球萵苣平均值', '奶油萵苣(日本種)', '紅葉萵苣(荷蘭種）', '廣東萵苣', '蘿美萵苣', '土植本島萵苣(1月取樣)', '土植本島萵苣(3月取樣)', '土植本島萵苣(4月取樣)', '土植本島萵苣(7月取樣)', '土植本島萵苣(10月取樣)', '水耕本島萵苣(1月取樣)', '水耕本島萵苣(4月取樣)', '水耕本島萵苣(7月取樣)', '水耕本島萵苣(10月取樣)', '有機本島萵苣(1月取樣)', '有機本島萵苣(4月取樣)', '有機本島萵苣(7月取樣)', '有機本島萵苣(10月取樣)', '水耕波士頓萵苣', '結球萵苣', '豌豆苗', '龍葵', '土植蕹菜(1月取樣)', '土植蕹菜(4月取樣)', '土植蕹菜(7月取樣)', '土植蕹菜(10月取樣)', '水耕蕹菜(1月取樣)', '水耕蕹菜(4月取樣)', '水耕蕹菜(7月取樣)', '水耕蕹菜(10月取樣)', '有機蕹菜(4月取樣)', '有機蕹菜(10月取樣)', '水蕹菜', '蘿蔔葉', '花椰菜', '冷凍花椰菜', '紫色花椰菜', '青花菜(1999年取樣)', '青花菜(2021年取樣)', '冷凍青花菜', '青花菜筍', '花椰菜乾', '金針菜', '金針菜乾', '洛神花乾', '絲瓜花', '冬瓜平均值', '冬瓜', '香芋冬瓜', '冬瓜(2022年取樣)', '南瓜平均值', '日本南瓜', '台灣南瓜', '栗子南瓜', '菊花南瓜', '胡瓜', '花胡瓜', '苦瓜(白皮)', '苦瓜(青皮)', '珍珠苦瓜', '野苦瓜', '隼人瓜', '隼人瓜(2023年取樣)', '白皮蛇瓜', '綠皮蛇瓜', '絲瓜', '稜角絲瓜', '越瓜', '蒲瓜平均值', '蒲瓜(長形)', '蒲瓜(圓形)', '花蒲瓜(圓形)', '葫蘆瓜', '黃櫛瓜', '綠櫛瓜', '枸杞乾', '長茄子', '圓茄子', '大番茄平均值(紅色系)', '牛番茄', '紅番茄', '桃太郎番茄', '黃番茄', '大番茄平均值(綠色系)', '粉柿番茄', '黑柿番茄', '綠番茄', '小番茄平均值(紅色系)', '聖女小番茄', '試交二號小番茄', '櫻桃小番茄', '黃金小蕃茄', '小番茄平均值(橙色系)', '金女小番茄', '黃金聖女小番茄', '橙蕃茄', '香瓜茄', '甜椒平均值(青皮)', '甜椒(青皮)', '小甜椒(青皮)', '高山甜椒(青皮)', '甜椒(紅皮)', '甜椒(黃皮)', '甜椒(橙皮)', '青辣椒平均值', '角椒', '長辣椒(青皮)', '糯米椒', '紅辣椒平均值', '長辣椒(紅皮)', '朝天椒(長果)', '朝天椒(圓果)', '乾長辣椒(紅皮)', '黃秋葵', '青花菜芽', '苜蓿芽', '紫甘藍芽', '黃豆芽', '黃豆芽(有機,2023年取樣)', '黑豆芽', '葵花芽', '綠豆芽', '豌豆芽', '蕎麥芽', '蘿蔔芽', '山蘇菜', '火炭母草', '石蓮花', '青葙', '假人蔘', '野苦瓜嫩梢', '過溝菜蕨', '蔘鬚', '龍骨瓣莕菜', '薄荷', '蕺菜', '蘆薈', '皇宮菜', '香芫荽', '荷蘭豆菜心', '厥子', '義大利茼蒿', '龍延草', '麵包果', '紅毛苔', '紫菜', '熟紫菜', '髮菜', '麒麟菜', '乾麒麟菜', '礁膜', '乾海茸芯', '海帶平均值', '海帶卷', '海帶茸', '海帶梗', '海帶結', '海帶絲', '乾海帶', '裙帶菜', '乾裙帶菜', '乾裙帶菜根', '鳳尾藻', '洋菜', '壽司海苔片', '木耳', '冷凍木耳', '乾木耳平均值', '乾木耳(紅耳仔)', '乾木耳(黑耳仔)', '乾川耳', '銀耳', '白毛木耳', '乾銀耳', '草菇', '雞腿菇', '雞腿菇(乾)', '松茸', '白精靈菇', '柳松菇', '乾柳松菇', '香菇平均值', '香菇(大)', '香菇(小)', '花菇', '乾香菇平均值', '乾香菇', '乾花菇', '乾白花菇', '乾鈕釦菇', '姬松茸', '乾姬松茸', '酒杯菇', '秀珍菇', '天喜菇', '白蠔菇', '玫瑰菇', '杏香菇', '杏鮑菇平均值', '杏鮑菇(大)', '杏鮑菇(中)', '杏鮑菇(小)', '珊瑚菇', '蠔菇', '鮑魚菇', '金針菇', '華翠菇', '滑菇', '舞菇', '鴻喜菇', '美白菇', '洋菇', '冷凍洋菇', '白茯苓', '猴頭菇', '乾猴頭菇', '乾竹笙', '松茸白菇', '金喜菇', '喜來菇', '富珍茸'])
word_4.set(['山竹', '木瓜平均值', '木瓜(2月取樣)', '木瓜(5月取樣)', '木瓜(8月取樣)', '木瓜(11月取樣)', '青木瓜', '安石榴', '百香果', '百香果汁', '金黃奇異果', '奇異果', '紅毛丹', '紅龍果(白肉)', '紅龍果(紅肉)', '北蕉平均值', '北蕉(2月取樣)', '北蕉(5月取樣)', '北蕉(9月取樣)', '北蕉(11月取樣)', '北蕉(0天,綠皮)', '北蕉(1天)', '北蕉(3天)', '北蕉(7天)', '李林蕉(2007年取樣)', '李林蕉(2012年取樣)', '南華蕉', '紅皮蕉(2004年取樣)', '紅皮蕉(2012年取樣)', '蛋蕉(2023年取樣)', '酪梨(綠皮)', '酪梨(室溫存放0天)', '酪梨(室溫存放3天)', '酪梨(室溫存放6天)', '榴槤', '開英種1號鳳梨', '鳳梨平均值(雜交種)', '甘蔗鳳梨', '甜蜜蜜鳳梨', '金鑽鳳梨', '牛奶鳳梨', '釋迦', '鳳梨釋迦', '桑葚', '桑葚汁', '草莓', '土芭樂', '芭樂平均值(白肉)', '牛乳芭樂', '世紀芭樂', '珍珠芭樂', '泰國芭樂', '無子芭樂', '紅心芭樂', '楊桃平均值', '楊桃(2月取樣)', '楊桃(4月取樣)', '楊桃(5月取樣)', '楊桃(9月取樣)', '楊桃(11月取樣)', '美國紅葡萄', '巨峰葡萄', '綠葡萄平均值', '美國綠葡萄', '意大利葡萄', '美國紅葡萄(含皮)', '美國紫葡萄(含皮)', '美國黑葡萄(含皮)', '美國綠葡萄(含皮)', '無子紅葡萄(含皮)', '黑美人葡萄(含皮)', '金香葡萄(含皮)', '葡萄乾', '蓮霧平均值(粉紅色種)', '紅寶石蓮霧', '黑金剛蓮霧', '黑珍珠蓮霧', '華寶大西瓜(花蓮)', '西瓜平均值(紅肉小瓜)', '皇宮西瓜', '紅鈴西瓜', '黑美人西瓜', '鳳光西瓜', '無籽西瓜', '西瓜平均值(黃肉小瓜)', '小玉西瓜', '金蘭西瓜', '嘉寶瓜', '甜瓜平均值(光皮洋香瓜)', '太陽洋香瓜', '狀元瓜', '蜜世界洋香瓜', '甜瓜平均值(東洋系脆瓜)', '美濃瓜', '黃香瓜', '嘉玉甜瓜', '新世紀哈密瓜', '新疆哈蜜瓜', '甜瓜平均值(網紋洋香瓜)', '七股香洋香瓜', '天香洋香瓜', '秋香洋香瓜', '紅寶石洋香瓜', '香華洋香瓜', '藍寶石洋香瓜', '土芒果', '芒果平均值(西洋種)', '肯特芒果', '海頓芒果', '凱特芒果', '愛文芒果', '聖心芒果', '黑香芒果', '芒果平均值(新興種)', '四季芒果', '玉文芒果', '金煌芒果', '金蜜芒果', '金興芒果', '香水芒果', '蓮花芒果', '芒果乾', '荔枝平均值', '玉荷苞荔枝', '黑葉仔荔枝', '冷凍荔枝', '龍眼', '龍眼乾', '帶殼龍眼乾', '李子平均值(青皮黃肉)', '加州青李', '翡翠李', '李子平均值(紅皮紅肉)', '紅肉李(大)', '紅肉李(小)', '李子平均值(紅皮黃肉)', '加州紅李(台灣)', '加州紅李(進口)', '加州蜜李(進口)', '香水李', '桃接李(大)', '桃接李(小)', '蜜棗李(進口)', '黃肉李', '黑李', '枇杷', '筆柿', '甜柿平均值', '富有甜柿(大雪山)', '甜柿(進口)', '國產甜柿', '牛心柿', '四周柿', '柿餅', '水蜜桃平均值', '水蜜桃', '甜蜜桃', '脆桃平均值', '白油桃', '玫瑰桃', '福壽桃', '鶯哥桃', '蟠桃', '青梅(胭脂梅)', '西洋梨平均值', '西洋梨(青皮)', '西洋梨(紅皮)', '西洋梨(黃皮)', '幸水梨', '大雪梨', '新世紀梨', '新興梨', '橫山梨', '豐水梨', '將軍蜜梨', '梨山蜜梨', '蜜棗平均值(大)', '蜜棗(長形)', '蜜棗(圓形)', '珍珠蜜棗', '國產紅棗', '紅棗(乾)', '黑棗(乾)', '蘋果平均值(青皮)', '青龍蘋果', '翠玉青蘋果', '翠玉青蘋果(帶皮)', '美國五爪蘋果', '蘋果平均值(混色)', '加拉蘋果', '津經蜜蘋果', '秋香蘋果', '富士蘋果', '富士蘋果(帶皮)', '金冠蘋果', '櫻桃', '白櫻桃', '椪柑', '紅柑', '茂谷柑', '海梨桶柑', '高牆桶柑', '檸檬柑', '長果金柑', '圓果金柑', '圓果金柑汁(綠皮)', '文旦', '文旦(2023年取樣)', '白柚', '西施蜜柚', '甜橙平均值(普遍系)', '柳橙', '香吉士(進口)', '澳洲甜橙(進口)', '青皮葡萄柚', '紅寶石葡萄柚(古坑)', '黃皮葡萄柚(進口)', '黃皮葡萄柚', '檸檬', '萊姆', '檸檬汁平均值', '檸檬汁(黃皮)', '檸檬汁(綠皮)', '萊姆汁', '紅甘蔗汁', '紅甘蔗汁(有機,2023年取樣)', '人心果', '可可椰子汁平均值', '可可椰子汁(屏東)', '可可椰子汁(進口)', '蛋黃果', '無花果', '無花果乾', '黃金果', '菠蘿蜜', '牛奶果', '餘甘子'])
word_5.set(['甘扁桃仁片(生)', '甘扁桃仁片(熟)', '甘扁桃仁(熟)', '松子仁(生)', '原味松子仁', '原味夏威夷豆', '生核桃', '栗子(生)', '栗子仁(生)', '開心果', '腰果(生)', '原味腰果', '原味榛果', '山粉圓', '亞麻仁籽', '亞麻仁籽粉', '咖啡豆(曼特寧)', '奇亞子', '白芝麻(生)', '黑芝麻(生)', '白芝麻(熟)', '白芝麻(熟)2022年取樣)', '黑芝麻(熟)', '黑芝麻(熟)(2022年取樣)', '黑芝麻粉', '帶殼花生(生)', '冷凍帶殼花生(熟)', '黑金剛花生(生)', '帶膜花生仁(生)(1995年之前取樣)', '去膜花生仁(生)', '帶膜花生仁(生)(2004年取樣)', '紅土帶殼花生(熟)', '花生粉', '芡實', '愛玉子', '原味葵瓜子(去殼)', '銀杏果', '蓮子', '蓮子(乾)', '牛油(未精煉)', '牛油(精煉)', '豬油', '豬油(2022年取樣)', '高油酸豬油', '雞油', '奶油(固態,不加鹽)', '奶油(固態,加鹽)', '奶油(液態)', '人造奶油(維生素強化)', '人造奶油(2021年取樣)', '中脂人造奶油', '人造奶油(低熱量)', '大豆油', '大豆油(卵磷脂強化)', '大豆油(多種維生素強化)', '玉米油', '米油(秈米)', '米油(粳米)', '亞麻仁油', '白芝麻油', '黑芝麻油', '調合芝麻油', '花生油', '調合花生油', '油菜籽油', '芥花油', '南瓜籽油', '紅花籽油', '高油酸紅花籽油', '核桃油', '油茶油', '熟油茶油', '高油酸棕櫚油', '椰子油', '葵花籽油', '葵花籽油(多種維生素強化)', '高油酸葵花籽油', '葡萄籽油', '橄欖油', '烤酥油', '調合植物油', '中鏈脂肪酸油'])

cal_value_0=[365, 365, 389, 370, 360, 362, 417, 355, 364, 361, 362, 362, 359, 361, 360, 66, 168, 107, 105, 172, 174, 31, 373, 366, 369, 357, 355, 358, 354, 356, 348, 357, 355, 353, 357, 357, 353, 364, 352, 340, 361, 358, 359, 358, 360, 362, 357, 363, 362, 360, 363, 355, 357, 353, 359, 364, 360, 364, 363, 355, 363, 358, 391, 363, 393, 360, 183, 372, 362, 359, 406, 393, 406, 361, 355, 155, 378, 387, 395, 379, 386, 363, 85, 89, 80, 73, 85, 74, 93, 95, 75, 65, 140, 93, 94, 71, 69, 92, 362, 119, 133, 122, 114, 138, 121, 358, 525, 128, 113, 121, 107, 147, 333, 31, 66, 77, 70, 59, 346, 67, 365, 65, 50, 73, 365, 76, 118, 146, 351, 385, 387, 384, 369, 325, 297, 300, 258, 315, 308, 280, 360, 220, 242, 109, 111, 329, 248, 354, 419, 394, 331, 187, 183, 460, 411, 217, 461, 484, 427, 379, 442, 452, 590, 376, 375, 257, 320, 332, 194, 296, 344, 328, 346, 341, 352, 277, 289, 292, 319, 377, 429, 396, 401, 378, 306, 322, 365, 341, 19, 19, 75, 91, 2, 53, 65, 110, 138, 110, 60, 39, 289, 192, 182, 155, 108, 509, 517, 490, 549, 444, 424, 512, 504, 553, 564, 484, 487, 487, 546, 489, 590, 481, 562, 613, 521, 536, 562, 511, 477, 425, 411, 343, 424, 422, 438, 395, 394, 396, 359, 403, 399, 391, 474, 410, 351, 346, 331, 347, 223, 347, 348, 344, 383, 464, 419, 430, 404, 68]
cal_value_1=[337, 348, 325, 349, 328, 328, 328, 385, 253, 185, 435, 431, 346, 344, 339, 344, 35, 112, 137, 27, 30, 57, 129, 137, 135, 389, 180, 401, 434, 35, 123, 41, 49, 42, 96, 31, 343, 364, 325, 31, 187, 325, 290, 360, 335, 225, 358, 162, 166, 233, 331, 120, 200, 184, 122, 153, 139, 151, 250, 430, 263, 120, 188, 56, 44, 67, 107, 157, 164, 123, 170, 198, 260, 198, 143, 252, 200, 131, 207, 295, 191, 244, 146, 184, 123, 120, 212, 214, 287, 209, 139, 360, 368, 267, 220, 182, 157, 284, 212, 218, 205, 128, 93, 491, 219, 185, 29, 295, 137, 152, 137, 837, 8, 7, 9, 8, 332, 82, 79, 198, 156, 186, 252, 253, 331, 72, 125, 196, 248, 212, 109, 112, 106, 104, 219, 119, 121, 117, 163, 130, 196, 157, 142, 173, 151, 143, 159, 183, 158, 208, 251, 165, 226, 228, 223, 210, 198, 222, 210, 131, 190, 204, 452, 111, 89, 9, 71, 209, 107, 442, 319, 229, 102, 111, 227, 282, 29, 97, 113, 94, 170, 199, 187, 187, 120, 130, 241, 123, 95, 63, 141, 105, 97, 107, 144, 466, 94, 85, 117, 110, 106, 106, 254, 97, 56, 124, 97, 151, 105, 101, 111, 275, 179, 180, 189, 124, 208, 192, 200, 243, 342, 166, 91, 91, 145, 194, 86, 104, 147, 69, 151, 158, 221, 155, 174, 204, 222, 349, 160, 147, 104, 49, 103, 68, 152, 137, 133, 224, 129, 141, 137, 149, 170, 155, 94, 91, 98, 85, 84, 88, 80, 79, 80, 98, 107, 98, 95, 100, 95, 99, 101, 111, 76, 147, 89, 101, 94, 83, 104, 90, 122, 82, 84, 115, 155, 83, 85, 130, 97, 93, 90, 85, 91, 78, 107, 106, 264, 103, 105, 116, 192, 190, 115, 114, 108, 113, 94, 119, 114, 118, 113, 97, 97, 91, 88, 87, 101, 86, 106, 80, 118, 98, 130, 99, 94, 119, 128, 101, 175, 124, 110, 100, 101, 87, 176, 92, 105, 136, 136, 165, 146, 142, 100, 100, 97, 95, 89, 149, 104, 99, 97, 97, 157, 116, 113, 125, 122, 112, 108, 110, 109, 130, 162, 111, 134, 127, 142, 112, 140, 5, 112, 96, 93, 81, 84, 81, 86, 196, 164, 137, 102, 93, 157, 272, 263, 102, 103, 149, 138, 119, 193, 176, 180, 100, 417, 410, 555, 412, 396, 536, 373, 472, 375, 403, 392, 111, 105, 95, 155, 214, 115, 123, 120, 105, 101, 126, 124, 119, 166, 201, 92, 79, 76, 77, 47, 282, 76, 277, 84, 245, 186, 47, 59, 58, 110, 184, 256, 193, 184, 89, 136, 99, 106, 335, 354, 383, 88, 122, 78, 114, 83, 79, 84, 97, 97, 96, 99, 109, 96, 93, 82, 100, 95, 92, 88, 96, 67, 93, 88, 97, 253, 40, 52, 43, 73, 44, 64, 80, 155, 264, 257, 122, 72, 53, 42, 54, 49, 59, 55, 70, 96, 263, 53, 51, 21, 37, 48, 37, 46, 57, 242, 256, 228, 243, 57, 61, 53, 61, 71, 50, 72, 100, 70, 86, 78, 95, 40, 73, 69, 78, 43, 246, 32, 36, 52, 33, 29, 19, 135, 139, 132, 129, 137, 160, 132, 139, 133, 136, 134, 143, 50, 48, 52, 47, 308, 330, 286, 344, 314, 137, 144, 61, 343, 145, 147, 143, 54, 344, 134, 142, 127, 184, 191, 178, 182, 87, 84, 89, 379, 376, 382, 288, 147, 162, 192, 161, 215, 64, 32, 82, 80, 187, 198, 47, 347, 164, 185, 182, 183, 194, 528, 172, 163, 160, 173, 238, 439, 96, 179]
cal_value_2=[73, 63, 62, 62, 63, 64, 64, 62, 64, 65, 48, 43, 68, 69, 59, 41, 46, 42, 36, 41, 63, 67, 54, 68, 60, 66, 61, 71, 62, 48, 46, 60, 61, 504, 420, 445, 416, 361, 360, 500, 408, 476, 375, 481, 366, 360, 360, 360, 406, 435, 68, 72, 90, 82, 74, 89, 73, 64, 37, 68, 34, 95, 97, 102, 90, 84, 46, 68, 137, 325, 309, 241, 323, 480, 80, 42, 65, 48, 59, 59, 75, 510, 517]
cal_value_3=[84, 39, 37, 44, 34, 42, 13, 27, 37, 18, 16, 19, 11, 33, 58, 137, 304, 20, 24, 75, 20, 40, 21, 21, 20, 21, 17, 25, 25, 24, 20, 25, 22, 22, 20, 23, 22, 21, 16, 21, 28, 53, 31, 122, 33, 54, 28, 22, 31, 33, 27, 42, 32, 42, 75, 24, 23, 16, 27, 34, 11, 23, 24, 21, 24, 20, 28, 33, 20, 35, 341, 28, 13, 14, 14, 15, 20, 10, 12, 13, 10, 11, 13, 13, 12, 12, 9, 14, 11, 13, 11, 31, 12, 10, 11, 11, 15, 18, 12, 14, 14, 11, 10, 15, 21, 15, 14, 16, 17, 14, 19, 19, 14, 54, 27, 22, 21, 57, 28, 15, 12, 18, 11, 13, 19, 17, 19, 18, 20, 21, 20, 26, 26, 37, 127, 99, 24, 14, 16, 26, 26, 24, 17, 22, 41, 71, 18, 24, 17, 21, 18, 33, 21, 16, 16, 16, 20, 13, 17, 18, 17, 23, 14, 14, 15, 13, 12, 15, 19, 17, 15, 14, 13, 31, 26, 22, 20, 17, 17, 27, 24, 17, 23, 26, 19, 24, 14, 23, 21, 40, 28, 38, 25, 32, 291, 40, 307, 306, 31, 11, 13, 9, 21, 74, 86, 49, 86, 76, 14, 13, 19, 20, 19, 30, 23, 22, 19, 32, 19, 20, 18, 18, 19, 18, 15, 20, 15, 13, 347, 25, 21, 19, 19, 20, 17, 23, 22, 18, 23, 25, 33, 34, 30, 34, 31, 31, 30, 31, 32, 26, 29, 23, 35, 30, 33, 28, 35, 33, 22, 49, 28, 80, 48, 90, 103, 382, 36, 25, 20, 32, 47, 41, 52, 26, 24, 25, 20, 24, 26, 12, 11, 50, 32, 77, 27, 330, 17, 55, 46, 4, 22, 23, 30, 23, 15, 79, 61, 265, 268, 294, 302, 41, 189, 16, 254, 19, 14, 29, 14, 17, 22, 220, 58, 225, 201, 213, 306, 278, 38, 51, 333, 329, 338, 336, 31, 45, 310, 36, 36, 298, 36, 36, 36, 286, 39, 37, 26, 52, 321, 333, 317, 310, 325, 40, 294, 50, 28, 26, 33, 35, 26, 41, 37, 40, 47, 33, 26, 22, 37, 29, 27, 28, 30, 27, 25, 39, 316, 30, 311, 312, 38, 39, 37, 37]
cal_value_4=[69, 38, 31, 44, 33, 44, 29, 67, 64, 73, 59, 56, 73, 51, 50, 85, 93, 92, 65, 90, 90, 87, 84, 68, 102, 111, 124, 93, 98, 87, 65, 80, 84, 92, 132, 56, 53, 57, 42, 50, 60, 104, 102, 32, 25, 39, 39, 38, 33, 40, 42, 38, 33, 42, 32, 29, 32, 34, 33, 31, 69, 64, 58, 64, 52, 61, 80, 63, 87, 72, 66, 60, 306, 35, 33, 34, 39, 33, 33, 32, 34, 36, 27, 33, 29, 34, 24, 40, 30, 32, 27, 29, 37, 37, 30, 43, 39, 28, 37, 40, 44, 34, 39, 30, 34, 54, 50, 49, 60, 50, 42, 50, 66, 56, 60, 62, 52, 64, 41, 65, 47, 334, 65, 68, 62, 28, 72, 276, 278, 48, 47, 48, 39, 41, 38, 48, 45, 60, 66, 36, 38, 36, 53, 35, 57, 38, 69, 57, 57, 57, 47, 62, 66, 196, 39, 40, 39, 44, 37, 51, 47, 42, 45, 35, 53, 62, 53, 44, 34, 42, 42, 44, 47, 36, 50, 47, 43, 43, 44, 46, 87, 227, 230, 49, 52, 46, 54, 51, 51, 55, 56, 45, 49, 45, 49, 75, 69, 40, 42, 44, 44, 45, 48, 56, 32, 32, 34, 48, 37, 40, 46, 44, 47, 46, 33, 37, 38, 37, 33, 38, 31, 30, 31, 34, 76, 72, 83, 17, 16, 19, 106, 67, 328, 44, 108, 62, 43]
cal_value_5=[564, 618, 588, 678, 680, 700, 667, 264, 176, 601, 568, 566, 672, 400, 524, 557, 437, 483, 598, 551, 626, 601, 599, 591, 601, 331, 344, 553, 506, 558, 516, 555, 516, 343, 407, 586, 142, 141, 334, 642, 885, 890, 892, 893, 891, 733, 699, 340, 725, 722, 674, 94, 884, 880, 883, 883, 883, 883, 820, 884, 881, 884, 883, 884, 883, 883, 883, 884, 880, 883, 883, 883, 883, 883, 884, 883, 883, 884, 884, 883, 887, 883]

water_value_0=[11.7, 12.1, 5.7, 12.3, 12.9, 12.6, 4.2, 13.6, 12.0, 12.6, 12.3, 12.3, 12.7, 11.7, 12.4, 83.8, 59.4, 75.7, 76.2, 59.1, 65.6, 91.1, 11.9, 11.5, 10.9, 13.4, 13.9, 13.0, 14.1, 13.5, 15.4, 13.2, 13.5, 14.3, 13.3, 13.7, 14.3, 11.8, 14.4, 17.8, 12.4, 13.1, 12.8, 13.5, 13.7, 13.1, 14.8, 12.3, 12.7, 13.1, 12.3, 14.8, 14.8, 14.8, 14.4, 12.5, 13.6, 12.5, 13.7, 13.6, 12.8, 14.3, 11.4, 11.9, 5.9, 12.6, 55.6, 11.3, 12.1, 12.5, 10.0, 10.1, 9.1, 13.2, 12.2, 63.1, 11.5, 11.0, 4.7, 12.2, 8.7, 11.2, 78.3, 77.4, 79.6, 81.3, 78.3, 81.0, 76.5, 75.6, 80.8, 83.3, 64.8, 76.5, 76.3, 81.9, 82.6, 76.5, 12.2, 70.0, 66.9, 69.4, 71.7, 65.7, 70.0, 12.9, 3.6, 68.9, 72.5, 69.5, 73.1, 65.3, 16.1, 92.1, 83.0, 80.5, 81.9, 84.6, 15.8, 82.6, 11.2, 83.4, 87.3, 82.0, 11.3, 81.0, 69.8, 63.4, 9.3, 0.4, 0.1, 0.0, 2.4, 15.9, 23.1, 22.5, 33.0, 18.3, 20.0, 27.1, 6.8, 45.5, 39.9, 74.0, 74.4, 21.2, 42.6, 26.1, 15.9, 20.9, 30.0, 53.5, 59.7, 10.3, 12.5, 48.7, 16.3, 8.9, 18.5, 6.2, 6.4, 18.3, 1.4, 32.4, 37.8, 37.8, 35.2, 28.8, 52.8, 51.8, 35.7, 48.7, 31.0, 33.5, 33.8, 52.3, 34.2, 33.3, 31.9, 24.3, 20.0, 25.7, 23.7, 22.5, 32.1, 27.4, 26.3, 23.9, 95.0, 95.2, 81.5, 77.2, 99.3, 86.5, 84.2, 78.2, 73.7, 76.3, 85.9, 91.4, 28.4, 64.2, 65.0, 66.7, 79.0, 2.3, 4.0, 1.2, 3.4, 2.9, 3.7, 1.7, 2.5, 1.9, 1.7, 1.1, 1.4, 8.6, 1.6, 5.2, 1.4, 1.7, 1.1, 1.3, 1.3, 1.2, 1.7, 3.5, 6.0, 11.2, 7.6, 14.5, 7.3, 7.6, 6.8, 1.4, 1.5, 0.9, 12.7, 2.6, 0.7, 4.1, 7.3, 4.3, 12.7, 13.9, 17.5, 13.0, 44.2, 12.5, 12.2, 12.7, 21.7, 15.7, 2.2, 3.1, 31.9, 85.5]
water_value_1=[12.7, 10.5, 14.9, 10.5, 14.7, 13.9, 14.6, 10.6, 33.5, 58.0, 3.4, 3.0, 9.9, 10.1, 11.4, 10.8, 90.8, 70.1, 64.8, 92.8, 92.2, 84.8, 67.9, 68.7, 69.8, 11.3, 58.4, 9.4, 5.4, 93.3, 67.8, 89.2, 87.2, 88.8, 75.4, 91.6, 12.4, 11.0, 14.4, 91.8, 58.6, 57.7, 63.2, 52.2, 53.7, 63.3, 50.9, 68.8, 70.0, 63.1, 55.7, 72.9, 69.4, 67.5, 71.5, 70.4, 73.8, 65.8, 61.3, 44.0, 61.2, 74.0, 65.9, 87.4, 90.9, 84.0, 78.5, 67.3, 66.8, 75.3, 70.2, 67.8, 60.6, 70.6, 75.2, 59.7, 67.8, 74.9, 66.7, 60.1, 69.3, 63.0, 73.6, 67.8, 74.2, 74.2, 65.3, 65.8, 57.7, 67.3, 72.8, 51.0, 51.9, 63.6, 68.6, 68.3, 69.5, 57.9, 67.3, 65.4, 69.2, 76.8, 84.2, 35.5, 61.5, 69.1, 92.4, 51.1, 70.7, 76.3, 73.3, 0.9, 98.5, 98.2, 99.2, 98.2, 58.1, 80.4, 80.1, 72.2, 75.0, 64.2, 61.2, 61.9, 54.5, 86.1, 79.2, 69.4, 65.0, 65.4, 75.5, 75.1, 76.0, 77.0, 68.4, 74.1, 75.3, 73.0, 71.6, 74.8, 68.3, 72.9, 74.4, 71.4, 73.0, 73.7, 72.4, 71.0, 72.6, 69.4, 64.2, 73.4, 66.1, 66.8, 65.4, 67.8, 69.2, 66.4, 65.8, 71.3, 71.0, 67.8, 44.7, 73.9, 80.4, 97.9, 85.2, 64.2, 75.5, 46.2, 57.3, 65.5, 78.6, 75.6, 60.4, 57.1, 93.7, 77.2, 81.4, 82.8, 71.7, 72.8, 69.4, 66.8, 73.0, 75.6, 64.7, 73.5, 76.6, 87.0, 72.3, 74.4, 70.9, 77.0, 71.3, 42.6, 76.8, 79.5, 73.6, 77.6, 75.0, 76.2, 65.2, 77.7, 86.0, 64.6, 74.2, 55.0, 71.5, 73.7, 70.4, 30.1, 67.4, 67.3, 66.6, 72.1, 64.9, 66.2, 66.0, 60.1, 56.3, 67.2, 78.8, 79.1, 74.2, 68.9, 79.6, 79.8, 75.1, 82.7, 69.7, 69.6, 66.1, 71.9, 70.0, 67.7, 67.3, 53.5, 71.1, 71.3, 76.7, 87.8, 76.1, 83.0, 70.9, 71.4, 72.6, 65.4, 73.8, 72.9, 71.6, 70.6, 69.2, 71.6, 76.5, 77.7, 75.9, 78.0, 81.3, 78.7, 81.1, 80.8, 81.0, 76.9, 77.6, 76.7, 75.9, 76.8, 76.9, 77.0, 76.9, 75.8, 79.8, 73.6, 80.3, 78.2, 78.0, 78.8, 77.1, 79.6, 73.3, 78.9, 79.9, 76.9, 71.4, 80.1, 80.1, 75.4, 79.3, 77.7, 78.2, 79.6, 78.4, 81.3, 76.0, 77.4, 61.2, 75.5, 74.8, 74.5, 67.2, 69.6, 74.1, 71.1, 73.4, 72.8, 78.0, 73.5, 73.3, 74.4, 75.6, 76.0, 77.5, 77.0, 78.8, 78.7, 74.9, 79.2, 76.8, 79.6, 77.1, 78.2, 73.7, 76.7, 78.4, 76.3, 73.3, 77.1, 71.7, 75.1, 75.5, 76.3, 76.0, 78.9, 66.7, 78.1, 77.1, 73.0, 72.4, 70.7, 72.8, 74.3, 77.7, 77.7, 78.2, 77.0, 79.8, 71.4, 76.7, 77.4, 79.1, 79.0, 72.0, 74.7, 76.3, 75.0, 71.7, 76.1, 76.1, 74.8, 76.0, 71.1, 66.8, 74.4, 69.8, 72.1, 67.4, 74.2, 68.6, 98.6, 77.3, 79.9, 78.6, 79.7, 78.8, 80.8, 77.9, 66.7, 69.4, 72.9, 77.5, 78.1, 71.7, 60.5, 62.5, 77.6, 74.5, 70.8, 70.5, 75.0, 70.2, 67.7, 68.5, 76.1, 45.2, 44.5, 28.3, 45.8, 45.7, 32.4, 47.3, 39.0, 49.3, 42.9, 47.1, 71.8, 77.0, 78.2, 72.5, 69.0, 76.4, 76.8, 75.8, 78.7, 75.9, 74.9, 75.2, 76.3, 74.1, 70.2, 77.7, 81.9, 81.3, 80.8, 88.5, 63.7, 83.4, 54.3, 78.1, 65.5, 60.2, 91.2, 93.0, 88.8, 71.6, 61.6, 53.1, 64.5, 66.2, 81.8, 74.8, 73.8, 75.8, 16.1, 18.4, 10.9, 78.1, 70.9, 82.3, 77.2, 76.3, 81.6, 77.9, 75.7, 77.0, 74.5, 76.1, 74.8, 77.4, 76.3, 78.4, 75.3, 77.2, 76.0, 77.4, 75.3, 84.0, 75.7, 79.3, 76.0, 20.1, 89.2, 88.0, 86.4, 81.0, 88.0, 84.4, 81.4, 45.3, 28.7, 33.9, 67.1, 78.2, 84.2, 87.2, 83.0, 86.8, 79.2, 83.8, 81.1, 75.8, 19.9, 83.2, 79.1, 91.0, 87.3, 83.2, 85.8, 84.0, 82.3, 24.2, 16.5, 31.9, 19.3, 82.7, 83.6, 81.7, 84.6, 84.8, 84.6, 80.8, 74.3, 82.2, 78.9, 77.0, 76.9, 90.3, 76.2, 73.1, 82.5, 82.1, 33.8, 92.7, 90.4, 89.8, 91.9, 93.1, 70.0, 75.9, 75.7, 76.1, 76.5, 75.8, 72.3, 76.1, 74.5, 76.9, 76.3, 79.9, 75.3, 87.6, 88.7, 86.4, 87.1, 52.8, 51.9, 53.7, 50.8, 49.7, 73.6, 74.0, 84.0, 49.2, 73.3, 72.7, 74.0, 84.8, 49.5, 74.7, 73.4, 75.9, 64.3, 64.7, 65.1, 63.2, 73.5, 74.5, 72.4, 44.3, 45.3, 43.3, 47.2, 75.9, 72.2, 69.3, 69.0, 65.3, 87.2, 90.1, 85.3, 86.3, 71.2, 70.9, 87.1, 49.7, 71.4, 66.7, 69.1, 65.9, 65.1, 24.2, 72.1, 74.7, 71.2, 66.9, 57.0, 20.4, 80.8, 70.2]
water_value_2=[85.8, 87.9, 88.2, 88.2, 87.9, 87.8, 87.7, 88.1, 87.4, 87.7, 89.4, 90.0, 86.9, 86.9, 86.9, 90.8, 89.4, 89.0, 90.7, 89.3, 86.3, 86.4, 88.0, 85.6, 86.9, 85.5, 85.9, 87.7, 87.7, 89.3, 89.1, 86.6, 86.4, 2.8, 2.5, 2.8, 2.1, 4.0, 4.1, 2.6, 4.4, 1.1, 2.9, 2.2, 3.0, 3.5, 0.8, 2.4, 2.2, 2.3, 82.7, 81.7, 80.6, 81.6, 83.6, 80.5, 82.5, 83.9, 90.5, 83.0, 90.9, 80.3, 79.0, 77.2, 79.7, 78.6, 88.5, 82.3, 74.5, 26.7, 47.2, 50.9, 44.4, 15.0, 82.8, 89.9, 87.7, 90.2, 88.6, 86.9, 84.1, 2.3, 1.9]
water_value_3=[76.9, 89.3, 89.6, 88.1, 90.2, 88.4, 96.0, 91.8, 89.3, 95.2, 95.5, 94.8, 96.5, 90.1, 75.8, 62.4, 15.6, 94.2, 93.4, 79.3, 94.0, 87.3, 93.7, 93.6, 94.0, 93.3, 95.1, 92.6, 92.4, 93.1, 93.6, 92.6, 93.0, 93.4, 93.4, 92.5, 92.8, 93.1, 95.0, 94.3, 92.0, 85.8, 90.9, 65.6, 90.5, 85.1, 92.0, 93.5, 91.4, 90.7, 92.3, 88.6, 91.3, 88.9, 79.1, 92.8, 93.0, 95.1, 91.0, 89.6, 95.7, 93.2, 92.9, 93.9, 92.9, 94.1, 91.7, 90.5, 93.9, 88.9, 4.7, 90.9, 95.6, 94.8, 95.1, 94.7, 93.3, 96.4, 95.8, 95.8, 96.3, 96.4, 95.3, 95.6, 95.7, 95.9, 96.2, 95.0, 96.0, 95.7, 95.6, 91.1, 95.8, 96.4, 96.4, 96.4, 95.1, 94.0, 95.7, 95.0, 94.8, 96.0, 96.1, 94.9, 93.1, 94.6, 94.7, 94.3, 95.1, 95.8, 94.2, 94.9, 95.5, 85.0, 91.5, 92.7, 93.1, 84.5, 90.7, 95.0, 95.7, 94.3, 96.3, 95.7, 94.6, 95.2, 93.8, 94.1, 93.5, 93.4, 93.6, 92.1, 91.5, 88.8, 60.2, 72.1, 92.1, 95.6, 94.7, 91.8, 91.9, 92.2, 93.9, 91.9, 85.9, 79.4, 93.7, 91.5, 94.1, 92.9, 93.4, 90.1, 93.6, 95.0, 95.2, 95.0, 94.1, 95.8, 95.0, 94.7, 95.1, 93.2, 95.7, 95.2, 95.3, 95.6, 96.0, 94.7, 94.3, 94.8, 95.4, 96.0, 96.1, 90.3, 91.0, 93.3, 93.5, 94.4, 94.3, 90.9, 92.2, 93.8, 92.5, 91.7, 93.7, 92.8, 95.1, 93.0, 93.8, 87.8, 90.8, 88.8, 92.3, 90.4, 13.7, 89.1, 11.0, 11.5, 90.0, 96.9, 96.5, 97.2, 94.1, 79.8, 77.4, 86.4, 76.9, 78.3, 96.0, 96.1, 94.4, 94.3, 94.6, 91.5, 93.7, 94.1, 94.5, 91.4, 94.6, 94.4, 94.8, 95.1, 94.9, 94.9, 95.9, 94.8, 95.0, 95.0, 4.8, 92.8, 93.9, 94.5, 94.7, 94.1, 94.8, 93.2, 93.8, 94.8, 93.6, 93.1, 90.9, 91.0, 91.5, 90.4, 91.5, 91.1, 90.8, 91.4, 91.0, 93.0, 92.2, 93.7, 90.8, 92.1, 91.2, 92.2, 90.7, 90.9, 93.6, 86.6, 92.3, 78.0, 86.8, 76.0, 71.3, 13.3, 89.8, 93.1, 93.6, 92.0, 87.4, 88.2, 85.0, 92.0, 93.1, 91.8, 94.1, 93.0, 91.6, 93.6, 96.7, 86.5, 92.6, 77.7, 91.9, 10.9, 94.7, 83.4, 86.2, 99.1, 93.1, 93.0, 90.9, 93.0, 95.3, 77.7, 85.4, 7.0, 12.3, 10.4, 15.7, 87.5, 6.2, 94.8, 15.1, 94.1, 95.5, 91.0, 95.9, 94.7, 93.6, 15.5, 58.7, 9.5, 9.3, 19.3, 19.4, 8.6, 89.9, 86.5, 7.3, 12.2, 2.4, 8.3, 91.1, 87.9, 13.5, 88.9, 89.3, 10.6, 89.8, 90.0, 89.2, 14.0, 88.6, 89.0, 92.1, 84.7, 8.2, 4.0, 10.3, 11.1, 7.3, 87.8, 10.3, 85.3, 91.3, 91.6, 90.5, 88.8, 92.0, 88.1, 89.4, 88.4, 86.6, 89.7, 92.2, 93.5, 89.1, 91.5, 91.9, 92.2, 90.8, 91.8, 92.1, 90.1, 18.8, 91.0, 12.7, 10.3, 88.5, 88.5, 89.0, 89.1]
water_value_4=[80.8, 89.1, 91.0, 87.4, 90.3, 87.5, 91.7, 80.7, 84.0, 79.6, 83.3, 84.0, 80.0, 85.7, 85.8, 75.7, 73.4, 73.9, 81.4, 74.2, 74.4, 75.4, 76.4, 80.7, 71.0, 68.3, 64.8, 73.4, 72.1, 75.0, 86.1, 85.0, 84.8, 83.2, 64.7, 84.4, 85.2, 83.8, 87.9, 85.8, 83.2, 70.0, 71.5, 91.0, 92.7, 89.0, 88.8, 88.9, 89.8, 88.7, 88.1, 89.0, 90.4, 88.0, 90.8, 91.6, 90.7, 90.2, 90.5, 91.2, 81.1, 82.4, 83.7, 82.0, 85.5, 82.7, 77.3, 82.4, 75.5, 79.9, 81.6, 83.0, 14.5, 90.1, 91.1, 90.3, 89.0, 90.6, 90.8, 90.9, 90.4, 89.7, 92.3, 90.5, 91.7, 90.2, 93.2, 88.7, 91.4, 90.5, 92.0, 91.6, 89.3, 89.3, 91.0, 87.6, 88.7, 91.8, 89.3, 88.4, 87.1, 90.0, 88.6, 91.2, 90.2, 84.9, 86.0, 86.3, 83.3, 86.0, 88.2, 86.3, 81.6, 84.5, 83.2, 82.9, 85.6, 82.3, 88.5, 81.8, 86.8, 7.6, 81.8, 80.9, 82.7, 91.9, 79.7, 18.2, 19.7, 86.9, 86.8, 87.0, 89.0, 88.9, 89.2, 86.7, 88.2, 83.0, 81.1, 89.9, 89.6, 90.1, 85.2, 90.1, 83.9, 89.1, 80.6, 84.0, 84.2, 83.7, 86.6, 82.6, 81.4, 44.5, 88.8, 88.6, 88.9, 87.3, 89.6, 85.3, 86.4, 87.9, 87.3, 90.0, 85.3, 82.8, 85.3, 87.7, 90.4, 88.1, 88.3, 87.5, 86.8, 89.7, 86.0, 86.6, 87.7, 87.8, 87.6, 86.7, 75.1, 35.8, 34.8, 86.3, 85.4, 87.1, 85.1, 85.8, 85.6, 84.6, 84.2, 87.2, 86.3, 87.6, 86.3, 78.8, 80.4, 88.7, 88.2, 87.4, 87.6, 87.1, 86.1, 84.4, 91.0, 90.6, 90.2, 86.4, 89.4, 88.6, 87.2, 87.6, 87.1, 87.0, 90.6, 89.9, 89.3, 89.6, 91.0, 90.5, 91.7, 91.7, 91.8, 90.9, 78.8, 80.1, 77.5, 94.8, 95.4, 94.2, 70.3, 81.3, 11.5, 87.7, 69.3, 82.6, 88.1]
water_value_5=[5.0, 3.0, 1.9, 1.9, 1.0, 1.2, 3.7, 34.3, 55.9, 1.1, 3.3, 2.2, 1.1, 8.7, 7.6, 2.9, 2.1, 7.2, 4.7, 6.0, 1.9, 1.4, 1.5, 1.0, 2.2, 43.7, 40.0, 6.4, 9.9, 4.2, 7.5, 1.4, 1.9, 14.1, 7.8, 4.0, 65.0, 63.2, 12.0, 14.4, 0.1, 0.3, 0.2, 0.0, 0.3, 15.8, 16.3, 61.7, 15.9, 15.2, 20.3, 56.0, 0.1, 0.4, 0.1, 0.0, 0.0, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.0, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]
#自訂函式執行按鈕之命令
#基礎代謝率之計算
def BMR():
    weight=num_weight.get()
    height=num_height.get()
    age=num_age.get()
    sesex=sex.get()
    bfp=num_bfp.get()
    # bmi=weight/pow(height/100,2)
    if sesex=='' and (num_bfp!=0.0 or height==0.0):
        bmr=370+((21.6)*weight)*((100-bfp)/100)
        num_bmr.set('你的基礎代謝率為 %.2f kcals，說明你今天會消耗 %.2f千卡路里的熱量'%(bmr,bmr))
    elif sesex=='0': # range bfp        
        if num_bfp!=0.0 and age!=0.0:
            # bfp=(1.39*bmi)+(0.16*age)-19.34
            bmr=370+((21.6)*weight)*((100-bfp)/100)
            num_bmr.set('你的基礎代謝率為 %.2f kcals，說明你今天會消耗 %.2f千卡路里的熱量'%(bmr,bmr))
        elif num_bfp==0.0:
            bmr=66+((13.7)*weight+(5)*height-(6.8)*age)
            bmr=((10)*weight+(6.25)*height-(5)*age)+5
            num_bmr.set('你的基礎代謝率為 %.2f kcals，說明你今天會消耗 %.2f千卡路里的熱量'%(bmr,bmr))  
    elif sesex=='1': # range bfp 
        if num_bfp!=0.0 and age!=0.0:
            # bfp=(1.39*bmi)+(0.16*age)-9
            bmr=370+((21.6)*weight)*((100-bfp)/100)
            num_bmr.set('你的基礎代謝率為 %.2f kcals，說明你今天會消耗 %.2f千卡路里的熱量'%(bmr,bmr))
        elif num_bfp==0.0:        
            bmr=655+((9.6)*weight+(1.8)*height-(4.7)*age)
            bmr=((10)*weight+(6.25)*height-(5)*age)-161
            num_bmr.set('你的基礎代謝率為 %.2f kcals，說明你今天會消耗 %.2f千卡路里的熱量'%(bmr,bmr))
#每日消耗總熱量之計算公式
def TDEE():
    age=num_age.get()
    sesex=sex.get()
    act_f=act_factor.get()
    pre_f=pre_factor.get()

    bmr=num_bmr.get()
    #從StringVar到str再以正則處理含有數值之資料eval()轉為float
    pattern=r'\d{3,4}\.\d{2}'
    bmr=re.findall(pattern,str(bmr))
    bmr=eval(bmr[0])

    tdee=bmr*act_f*pre_f
    # bmi=22之第50百分位之數值
    if sesex=='0':
        if age<=30:
            if tdee<=1500:
                num_tdee.set('你每日攝取卡路里建議為 %.2f kcals，但你可能很需要多運動'%(tdee))
            elif tdee<=1700:
                num_tdee.set('你每日攝取卡路里建議為 %.2f kcals，且建議你可以增加活動量'%(tdee))
            elif tdee<=1950:
                num_tdee.set('你每日攝取卡路里建議為 %.2f kcals，且你的活動量很適中，持續保持'%(tdee))
            elif tdee<=2150:
                num_tdee.set('你每日攝取卡路里建議為 %.2f kcals，且你有高度的活動量，很厲害!'%(tdee))
            elif tdee>2150:
                num_tdee.set('你每日攝取卡路里建議為 %.2f kcals，且你的訓練已接近運動員，值得敬佩!'%(tdee))
        elif age<=50:
            if tdee<=1450:
                num_tdee.set('你每日攝取卡路里建議為 %.2f kcals，但你可能很需要多運動'%(tdee))
            elif tdee<=1650:
                num_tdee.set('你每日攝取卡路里建議為 %.2f kcals，且建議你可以增加活動量'%(tdee))
            elif tdee<=1900:
                num_tdee.set('你每日攝取卡路里建議為 %.2f kcals，且你的活動量很適中，持續保持'%(tdee))
            elif tdee<=2100:
                num_tdee.set('你每日攝取卡路里建議為 %.2f kcals，且你有高度的活動量，很厲害!'%(tdee))
            elif tdee>2100: 
                num_tdee.set('你每日攝取卡路里建議為 %.2f kcals，且你的訓練已接近運動員，值得敬佩!'%(tdee))
        elif age<=70:
            if tdee<=1400:
                num_tdee.set('你每日攝取卡路里建議為 %.2f kcals，但你可能很需要多運動'%(tdee))
            elif tdee<=1600:
                num_tdee.set('你每日攝取卡路里建議為 %.2f kcals，且建議你可以增加活動量'%(tdee))
            elif tdee<=1800:
                num_tdee.set('你每日攝取卡路里建議為 %.2f kcals，且你的活動量很適中，持續保持'%(tdee))
            elif tdee<=2000:
                num_tdee.set('你每日攝取卡路里建議為 %.2f kcals，且你有高度的活動量，很厲害!'%(tdee))
            elif tdee>2000:
                num_tdee.set('你每日攝取卡路里建議為 %.2f kcals，且你的訓練已接近運動員，值得敬佩!'%(tdee))
        elif age>70:
            if tdee<=1300:
                num_tdee.set('你每日攝取卡路里建議為 %.2f kcals，但你可能很需要多運動'%(tdee))
            elif tdee<=1500:
                num_tdee.set('你每日攝取卡路里建議為 %.2f kcals，且建議你可以增加活動量'%(tdee))
            elif tdee<=1700:
                num_tdee.set('你每日攝取卡路里建議為 %.2f kcals，且你的活動量很適中，持續保持'%(tdee))
            elif tdee>1700: 
                num_tdee.set('你每日攝取卡路里建議為 %.2f kcals，且你有高度的活動量，很厲害!'%(tdee))
    elif sesex=='1':
        if age<=30:
            if tdee<=1850:
                num_tdee.set('你每日攝取卡路里建議為 %.2f kcals，但你可能很需要多運動'%(tdee))
            elif tdee<=2150:
                num_tdee.set('你每日攝取卡路里建議為 %.2f kcals，且建議你可以增加活動量'%(tdee))
            elif tdee<=2400:
                num_tdee.set('你每日攝取卡路里建議為 %.2f kcals，且你的活動量很適中，持續保持'%(tdee))
            elif tdee<=2700:
                num_tdee.set('你每日攝取卡路里建議為 %.2f kcals，且你有高度的活動量，很厲害!'%(tdee))
            elif tdee>2700:
                num_tdee.set('你每日攝取卡路里建議為 %.2f kcals，且你的訓練已接近運動員，值得敬佩!'%(tdee))
        elif age<=50:
            if tdee<=1800:
                num_tdee.set('你每日攝取卡路里建議為 %.2f kcals，但你可能很需要多運動'%(tdee))
            elif tdee<=2100:
                num_tdee.set('你每日攝取卡路里建議為 %.2f kcals，且建議你可以增加活動量'%(tdee))
            elif tdee<=2400:
                num_tdee.set('你每日攝取卡路里建議為 %.2f kcals，且你的活動量很適中，持續保持'%(tdee))
            elif tdee<=2650:
                num_tdee.set('你每日攝取卡路里建議為 %.2f kcals，且你有高度的活動量，很厲害!'%(tdee))
            elif tdee>2650: 
                num_tdee.set('你每日攝取卡路里建議為 %.2f kcals，且你的訓練已接近運動員，值得敬佩!'%(tdee))
        elif age<=70:
            if tdee<=1700:
                num_tdee.set('你每日攝取卡路里建議為 %.2f kcals，但你可能很需要多運動'%(tdee))
            elif tdee<=1950:
                num_tdee.set('你每日攝取卡路里建議為 %.2f kcals，且建議你可以增加活動量'%(tdee))
            elif tdee<=2250:
                num_tdee.set('你每日攝取卡路里建議為 %.2f kcals，且你的活動量很適中，持續保持'%(tdee))
            elif tdee<=2500:
                num_tdee.set('你每日攝取卡路里建議為 %.2f kcals，且你有高度的活動量，很厲害!'%(tdee))
            elif tdee>2500: 
                num_tdee.set('你每日攝取卡路里建議為 %.2f kcals，且你的訓練已接近運動員，值得敬佩!'%(tdee))
        elif age>70:
            if tdee<=1650:
                num_tdee.set('你每日攝取卡路里建議為 %.2f kcals，但你可能很需要多運動'%(tdee))
            elif tdee<=1900:
                num_tdee.set('你每日攝取卡路里建議為 %.2f kcals，且建議你可以增加活動量'%(tdee))
            elif tdee<=2150:
                num_tdee.set('你每日攝取卡路里建議為 %.2f kcals，且你的活動量很適中，持續保持'%(tdee))
            elif tdee>2150: 
                num_tdee.set('你每日攝取卡路里建議為 %.2f kcals，且你有高度的活動量，很厲害!'%(tdee))
#建立六邊形互動式圖層函式
def HEXAGON():
    #設定標籤內容還原為空值
    label_show_hexagon.configure(text='')
    
    #取得總熱量消耗之值
    tdee=num_tdee.get()
    #從StringVar到str再以正則處理含有數值之資料eval()轉為float  
    pattern=r'\d{3,4}\.\d{2}'
    tdee=re.findall(pattern,str(tdee))
    tdee=eval(tdee[0])

    # Draw vertical hexagons
    # 將畫布貼於標籤之上
    hexa_canvas=tk.Canvas(label_show_hexagon,width=500,height=500)
    # 設定同心六邊形之基本參數
    center_x=200
    center_y=200
    num_hexagons=14
    initial_radius=10
    gap=12
    ratelist=list(np.arange(1.5,8.5,0.5))
    #運用numpy抓取使用者的指標點資訊
    user_points=np.zeros((12,1))
    # Draw vertical hexagons
    for n in range(num_hexagons):
        radius=initial_radius+n*gap
        points=[]
        for p in range(6):
            angle=math.radians(30+60*p)  # Rotate each vertex by 60 degrees
            x=center_x+radius*math.cos(angle)
            y=center_y+radius*math.sin(angle)
            points.extend([x,y])
            if tdee<=1000:
              if n==ratelist.index(1.5) and p==0:
                  user_points[0,0]+=x
                  user_points[1,0]+=y
              elif n==ratelist.index(1.5) and p==1:
                  user_points[2,0]+=x
                  user_points[3,0]+=y
              elif n==ratelist.index(1.5) and p==2:
                  user_points[4,0]+=x
                  user_points[5,0]+=y
              elif n==ratelist.index(1.5) and p==3:
                  user_points[6,0]+=x
                  user_points[7,0]+=y
              elif n==ratelist.index(1.5) and p==4:
                  user_points[8,0]+=x
                  user_points[9,0]+=y
              elif n==ratelist.index(1.5) and p==5:
                  user_points[10,0]+=x
                  user_points[11,0]+=y             
            elif tdee<=1200:
              if n==ratelist.index(1.5) and p==0:
                  user_points[0,0]+=x
                  user_points[1,0]+=y
              elif n==ratelist.index(3) and p==1:
                  user_points[2,0]+=x
                  user_points[3,0]+=y
              elif n==ratelist.index(1.5) and p==2:
                  user_points[4,0]+=x
                  user_points[5,0]+=y
              elif n==ratelist.index(3) and p==3:
                  user_points[6,0]+=x
                  user_points[7,0]+=y
              elif n==ratelist.index(2) and p==4:
                  user_points[8,0]+=x
                  user_points[9,0]+=y
              elif n==ratelist.index(4) and p==5:
                  user_points[10,0]+=x
                  user_points[11,0]+=y             
            elif tdee<=1500:
              if n==ratelist.index(2.5) and p==0:
                  user_points[0,0]+=x
                  user_points[1,0]+=y
              elif n==ratelist.index(4) and p==1:
                  user_points[2,0]+=x
                  user_points[3,0]+=y
              elif n==ratelist.index(1.5) and p==2:
                  user_points[4,0]+=x
                  user_points[5,0]+=y
              elif n==ratelist.index(3) and p==3:
                  user_points[6,0]+=x
                  user_points[7,0]+=y
              elif n==ratelist.index(2) and p==4:
                  user_points[8,0]+=x
                  user_points[9,0]+=y
              elif n==ratelist.index(4) and p==5:
                  user_points[10,0]+=x
                  user_points[11,0]+=y                
            elif tdee<=1800:
              if n==ratelist.index(3) and p==0:
                  user_points[0,0]+=x
                  user_points[1,0]+=y
              elif n==ratelist.index(5) and p==1:
                  user_points[2,0]+=x
                  user_points[3,0]+=y
              elif n==ratelist.index(1.5) and p==2:
                  user_points[4,0]+=x
                  user_points[5,0]+=y
              elif n==ratelist.index(3) and p==3:
                  user_points[6,0]+=x
                  user_points[7,0]+=y
              elif n==ratelist.index(2) and p==4:
                  user_points[8,0]+=x
                  user_points[9,0]+=y
              elif n==ratelist.index(5) and p==5:
                  user_points[10,0]+=x
                  user_points[11,0]+=y               
            elif tdee<=2000:
              if n==ratelist.index(3) and p==0:
                  user_points[0,0]+=x
                  user_points[1,0]+=y
              elif n==ratelist.index(6) and p==1:
                  user_points[2,0]+=x
                  user_points[3,0]+=y
              elif n==ratelist.index(1.5) and p==2:
                  user_points[4,0]+=x
                  user_points[5,0]+=y
              elif n==ratelist.index(4) and p==3:
                  user_points[6,0]+=x
                  user_points[7,0]+=y
              elif n==ratelist.index(3) and p==4:
                  user_points[8,0]+=x
                  user_points[9,0]+=y
              elif n==ratelist.index(6) and p==5:
                  user_points[10,0]+=x
                  user_points[11,0]+=y               
            elif tdee<=2200:
              if n==ratelist.index(3.5) and p==0:
                  user_points[0,0]+=x
                  user_points[1,0]+=y
              elif n==ratelist.index(6) and p==1:
                  user_points[2,0]+=x
                  user_points[3,0]+=y
              elif n==ratelist.index(1.5) and p==2:
                  user_points[4,0]+=x
                  user_points[5,0]+=y
              elif n==ratelist.index(4) and p==3:
                  user_points[6,0]+=x
                  user_points[7,0]+=y
              elif n==ratelist.index(3.5) and p==4:
                  user_points[8,0]+=x
                  user_points[9,0]+=y
              elif n==ratelist.index(6) and p==5:
                  user_points[10,0]+=x
                  user_points[11,0]+=y                
            elif tdee<=2500:
              if n==ratelist.index(4) and p==0:
                  user_points[0,0]+=x
                  user_points[1,0]+=y
              elif n==ratelist.index(7) and p==1:
                  user_points[2,0]+=x
                  user_points[3,0]+=y
              elif n==ratelist.index(1.5) and p==2:
                  user_points[4,0]+=x
                  user_points[5,0]+=y
              elif n==ratelist.index(5) and p==3:
                  user_points[6,0]+=x
                  user_points[7,0]+=y
              elif n==ratelist.index(4) and p==4:
                  user_points[8,0]+=x
                  user_points[9,0]+=y
              elif n==ratelist.index(7) and p==5:
                  user_points[10,0]+=x
                  user_points[11,0]+=y               
            elif tdee<=2700: 
              if n==ratelist.index(4) and p==0:
                  user_points[0,0]+=x
                  user_points[1,0]+=y
              elif n==ratelist.index(8) and p==1:
                  user_points[2,0]+=x
                  user_points[3,0]+=y
              elif n==ratelist.index(2) and p==2:
                  user_points[4,0]+=x
                  user_points[5,0]+=y
              elif n==ratelist.index(5) and p==3:
                  user_points[6,0]+=x
                  user_points[7,0]+=y
              elif n==ratelist.index(4) and p==4:
                  user_points[8,0]+=x
                  user_points[9,0]+=y
              elif n==ratelist.index(8) and p==5:
                  user_points[10,0]+=x
                  user_points[11,0]+=y
            #擴大標準以便完成超標圖
            elif tdee<=3000: 
              if n==ratelist.index(5) and p==0:
                  user_points[0,0]+=x
                  user_points[1,0]+=y
              elif n==ratelist.index(8) and p==1:
                  user_points[2,0]+=x
                  user_points[3,0]+=y
              elif n==ratelist.index(4) and p==2:
                  user_points[4,0]+=x
                  user_points[5,0]+=y
              elif n==ratelist.index(6) and p==3:
                  user_points[6,0]+=x
                  user_points[7,0]+=y
              elif n==ratelist.index(5) and p==4:
                  user_points[8,0]+=x
                  user_points[9,0]+=y
              elif n==ratelist.index(8) and p==5:
                  user_points[10,0]+=x
                  user_points[11,0]+=y
            elif tdee>3000: 
              if n==ratelist.index(6) and p==0:
                  user_points[0,0]+=x
                  user_points[1,0]+=y
              elif n==ratelist.index(8) and p==1:
                  user_points[2,0]+=x
                  user_points[3,0]+=y
              elif n==ratelist.index(6) and p==2:
                  user_points[4,0]+=x
                  user_points[5,0]+=y
              elif n==ratelist.index(7) and p==3:
                  user_points[6,0]+=x
                  user_points[7,0]+=y
              elif n==ratelist.index(6) and p==4:
                  user_points[8,0]+=x
                  user_points[9,0]+=y
              elif n==ratelist.index(8) and p==5:
                  user_points[10,0]+=x
                  user_points[11,0]+=y
        # 建立同心六邊形
        hexa_canvas.create_polygon(points,outline='gray80',fill='',width=2)
        #事件綁定自體兩倍大之顯示效果
        # from tkinter import font
        num_hexagons=14
        def on_enter(event):
            """Double the font size of the hovered text item."""
            hexa_canvas=event.widget
            # for n in range(num_hexagons):
            #     for k in range(0,6,1):
            item=hexa_canvas.find_withtag("current")# Find the item under the cursor
            # items=[2, 3, 4, 5, 6, 7,
            # 9, 10, 11, 12, 13, 14,
            # 16, 17, 18, 19, 20, 21,
            # 23, 24, 25, 26, 27, 28,
            # 30, 31, 32, 33, 34, 35,
            # 37, 38, 39, 40, 41, 42,
            # 44, 45, 46, 47, 48, 49,
            # 51, 52, 53, 54, 55, 56,
            # 58, 59, 60, 61, 62, 63,
            # 65, 66, 67, 68, 69, 70,
            # 72, 73, 74, 75, 76, 77,
            # 79, 80, 81, 82, 83, 84,
            # 86, 87, 88, 89, 90, 91,
            # 93, 94, 95, 96, 97, 98]
            if item:
                hexa_canvas.itemconfig(item,font=("微軟正黑體",12),fill='navy')
                
        def on_leave(event):
            """Restore the original font size when leaving the text item."""
            hexa_canvas=event.widget
            # for n in range(num_hexagons):
            #     for k in range(0,6,1):
            item=hexa_canvas.find_withtag("current")# Find the item under the cursor
            # items=[2, 3, 4, 5, 6, 7,
            # 9, 10, 11, 12, 13, 14,
            # 16, 17, 18, 19, 20, 21,
            # 23, 24, 25, 26, 27, 28,
            # 30, 31, 32, 33, 34, 35,
            # 37, 38, 39, 40, 41, 42,
            # 44, 45, 46, 47, 48, 49,
            # 51, 52, 53, 54, 55, 56,
            # 58, 59, 60, 61, 62, 63,
            # 65, 66, 67, 68, 69, 70,
            # 72, 73, 74, 75, 76, 77,
            # 79, 80, 81, 82, 83, 84,
            # 86, 87, 88, 89, 90, 91,
            # 93, 94, 95, 96, 97, 98]
            if item:
                hexa_canvas.itemconfig(item,font=("微軟正黑體",4),fill='blue')
        # 建立同心六邊形之指標數字
        # global default_font,large_font
        # default_font=("微軟正黑體",4) # Tuple font definition for Canvas
        # large_font=("微軟正黑體",12) # Tuple font definition for Canvas
        # Add text items to the Canvas
        # Bind events to the Canvas
        # Bind to the text's tag
        for i,j in zip(range(0,12,2),range(1,12,2)):
            x,y=points[i],points[j]
            hexa_canvas.create_text(points[i],points[j],text=ratelist[n],font=("微軟正黑體",4),fill='blue',tags=("item","hoverable"))          
        hexa_canvas.tag_raise("item")
        hexa_canvas.tag_bind("hoverable","<Enter>",on_enter)
        hexa_canvas.tag_bind("hoverable","<Leave>",on_leave) 
        # hexa_canvas.tag_bind(f"item{6*n+k}","<Enter>",on_enter)
        # hexa_canvas.tag_bind(f"item{6*n+k}","<Leave>",on_leave)
        # hexa_canvas.bind("<Enter>",on_enter)
        # hexa_canvas.bind("<Leave>",on_leave)
        # 建立同心六邊形之指標數字
        # hexa_canvas.create_text(points[0],points[1],text=ratelist[n],anchor='nw',fill='blue',tags=f"item{n}",font=("微軟正黑體",4))
        # hexa_canvas.create_text(points[2],points[3],text=ratelist[n],anchor='n',fill='blue',tags=f"item{n}",font=("微軟正黑體",4))
        # hexa_canvas.create_text(points[4],points[5],text=ratelist[n],anchor='ne',fill='blue',tags=f"item{n}",font=("微軟正黑體",4))
        # hexa_canvas.create_text(points[6],points[7],text=ratelist[n],anchor='se',fill='blue',tags=f"item{n}",font=("微軟正黑體",4))
        # hexa_canvas.create_text(points[8],points[9],text=ratelist[n],anchor='s',fill='blue',tags=f"item{n}",font=("微軟正黑體",4))
        # hexa_canvas.create_text(points[10],points[11],text=ratelist[n],anchor='sw',fill='blue',tags=f"item{n}",font=("微軟正黑體",4))
        # Bind events to the Canvas
        # Bind to the text's tag
        # for k in range(num_hexagons):
        #     hexa_canvas.tag_bind(f"item{6*n+k}","<Enter>",on_enter)
        #     hexa_canvas.tag_bind(f"item{6*n+k}","<Leave>",on_leave)       
        # hexa_canvas.tag_bind("item0","<Enter>",on_enter)
        # hexa_canvas.tag_bind("item0","<Leave>",on_leave) 
        # hexa_canvas.tag_bind("item1","<Enter>",on_enter)
        # hexa_canvas.tag_bind("item1","<Leave>",on_leave) 
        # hexa_canvas.tag_bind("item2","<Enter>",on_enter)
        # hexa_canvas.tag_bind("item2","<Leave>",on_leave) 
        # hexa_canvas.tag_bind("item3","<Enter>",on_enter)
        # hexa_canvas.tag_bind("item3","<Leave>",on_leave) 
        # hexa_canvas.tag_bind("item4","<Enter>",on_enter)
        # hexa_canvas.tag_bind("item4","<Leave>",on_leave) 
        # hexa_canvas.tag_bind("item5","<Enter>",on_enter)
        # hexa_canvas.tag_bind("item5","<Leave>",on_leave) 
        # hexa_canvas.tag_bind("item6","<Enter>",on_enter)
        # hexa_canvas.tag_bind("item6","<Leave>",on_leave) 
        # hexa_canvas.tag_bind("item7","<Enter>",on_enter)
        # hexa_canvas.tag_bind("item7","<Leave>",on_leave) 
        # hexa_canvas.tag_bind("item8","<Enter>",on_enter)
        # hexa_canvas.tag_bind("item8","<Leave>",on_leave) 
        # hexa_canvas.tag_bind("item9","<Enter>",on_enter)
        # hexa_canvas.tag_bind("item9","<Leave>",on_leave) 
        # hexa_canvas.tag_bind("item10","<Enter>",on_enter)
        # hexa_canvas.tag_bind("item10","<Leave>",on_leave)
        # hexa_canvas.tag_bind("item11","<Enter>",on_enter)
        # hexa_canvas.tag_bind("item11","<Leave>",on_leave)
        # hexa_canvas.tag_bind("item12","<Enter>",on_enter)
        # hexa_canvas.tag_bind("item12","<Leave>",on_leave)
        # hexa_canvas.tag_bind("item13","<Enter>",on_enter)
        # hexa_canvas.tag_bind("item13","<Leave>",on_leave)
    # print(user_points)    
    user_points=list(user_points[:,0])
    # 建立使用者之多邊形    
    hexa_canvas.create_polygon(user_points,fill='magenta',tag='user_result_polygon')
    # 建立營養物質標籤    
    labeldict={0:'全榖雜糧類(碗)',1:'豆魚蛋肉類(份)',2:'乳品類(杯)',3:'蔬菜類(份)',4:'水果類(份)',5:'油脂與堅果種子類(份)'}
    text_0=hexa_canvas.create_text(350,300,text=labeldict[0],anchor='nw')
    text_1=hexa_canvas.create_text(200,375,text=labeldict[1],anchor='n')
    text_2=hexa_canvas.create_text(75,300,text=labeldict[2],anchor='ne')
    text_3=hexa_canvas.create_text(75,100,text=labeldict[3],anchor='se')
    text_4=hexa_canvas.create_text(200,20,text=labeldict[4],anchor='s')
    text_5=hexa_canvas.create_text(350,100,text=labeldict[5],anchor='sw')
    # Bind click event to the text label
    hexa_canvas.tag_bind(text_0,"<Button-1>",lambda event,text_id=text_0:on_hexa_text_click(event,text_id))
    hexa_canvas.tag_bind(text_1,"<Button-1>",lambda event,text_id=text_1:on_hexa_text_click(event,text_id))
    hexa_canvas.tag_bind(text_2,"<Button-1>",lambda event,text_id=text_2:on_hexa_text_click(event,text_id))    
    hexa_canvas.tag_bind(text_3,"<Button-1>",lambda event,text_id=text_3:on_hexa_text_click(event,text_id))
    hexa_canvas.tag_bind(text_4,"<Button-1>",lambda event,text_id=text_4:on_hexa_text_click(event,text_id))
    hexa_canvas.tag_bind(text_5,"<Button-1>",lambda event,text_id=text_5:on_hexa_text_click(event,text_id))
    # 建立底標題    
    hexa_canvas.create_text(200,420,text='建議營養攝取份量',anchor='s',font=("微軟正黑體",18))
    # 以tag_raise()、tag_lower()函式建立圖層相對位置    
    hexa_canvas.tag_lower('user_result_polygon')
    
    # hexa_canvas.configure(background='gray20')
    # label_show_hexagon.configure(background='gray20')
    
    hexa_canvas.grid(row=0,column=0,ipadx=5,pady=10,ipady=10)
    # 顯示貼上畫布之標籤
    label_show_hexagon.grid(row=0,column=0,ipadx=5,pady=10,ipady=10)
    # tagbind綁定listbox顯示之事件
    def on_hexa_text_click(event,text_id):
        food_info_0.grid_forget()
        food_info_1.grid_forget()
        food_info_2.grid_forget()
        food_info_3.grid_forget()
        food_info_4.grid_forget()
        food_info_5.grid_forget()
        labeldict={0:'全榖雜糧類(碗)',1:'豆魚蛋肉類(份)',2:'乳品類(杯)',3:'蔬菜類(份)',4:'水果類(份)',5:'油脂與堅果種子類(份)'}
        global listbox_0
        global listbox_1
        global listbox_2
        global listbox_3
        global listbox_4
        global listbox_5
        # This function is triggered when a label is clicked    
        if text_id==text_0:
            scrollbar=tk.Scrollbar(nutrition_info)
            listbox_0=tk.Listbox(nutrition_info,listvariable=word_0,width=20,height=20,yscrollcommand=scrollbar.set,selectmode="multiple")#selectmode="multiple"
            scrollbar.grid(row=0,rowspan=3,column=2,sticky="ns")
            listbox_0.grid(row=0,rowspan=3,column=1,sticky="nsew")
            scrollbar.config(command=listbox_0.yview)
            food_info_0.grid(row=0,rowspan=3,column=1,columnspan=2)
            tk.Label(basic_info,width=20,text=labeldict[0],font=("微軟正黑體",15)).grid(row=11,column=1,columnspan=2)
        elif text_id==text_1:
            scrollbar=tk.Scrollbar(nutrition_info)
            listbox_1=tk.Listbox(nutrition_info,listvariable=word_1,width=20,height=20,yscrollcommand=scrollbar.set,selectmode="multiple")#selectmode="multiple"
            scrollbar.grid(row=0,rowspan=3,column=2,sticky="ns")
            listbox_1.grid(row=0,rowspan=3,column=1,sticky="nsew")
            scrollbar.config(command=listbox_1.yview)
            food_info_1.grid(row=0,rowspan=3,column=1,columnspan=2)
            tk.Label(basic_info,width=20,text=labeldict[1],font=("微軟正黑體",15)).grid(row=11,column=1,columnspan=2)
        elif text_id==text_2:
            scrollbar=tk.Scrollbar(nutrition_info)
            listbox_2=tk.Listbox(nutrition_info,listvariable=word_2,width=20,height=20,yscrollcommand=scrollbar.set,selectmode="multiple")#selectmode="multiple"
            scrollbar.grid(row=0,rowspan=3,column=2,sticky="ns")
            listbox_2.grid(row=0,rowspan=3,column=1,sticky="nsew")
            scrollbar.config(command=listbox_2.yview)
            food_info_2.grid(row=0,rowspan=3,column=1,columnspan=2)
            tk.Label(basic_info,width=20,text=labeldict[2],font=("微軟正黑體",15)).grid(row=11,column=1,columnspan=2)
        elif text_id==text_3:
            scrollbar=tk.Scrollbar(nutrition_info)
            listbox_3=tk.Listbox(nutrition_info,listvariable=word_3,width=20,height=20,yscrollcommand=scrollbar.set,selectmode="multiple")#selectmode="multiple"
            scrollbar.grid(row=0,rowspan=3,column=2,sticky="ns")
            listbox_3.grid(row=0,rowspan=3,column=1,sticky="nsew")
            scrollbar.config(command=listbox_3.yview)
            food_info_3.grid(row=0,rowspan=3,column=1,columnspan=2)
            tk.Label(basic_info,width=20,text=labeldict[3],font=("微軟正黑體",15)).grid(row=11,column=1,columnspan=2)
        elif text_id==text_4:
            scrollbar=tk.Scrollbar(nutrition_info)
            listbox_4=tk.Listbox(nutrition_info,listvariable=word_4,width=20,height=20,yscrollcommand=scrollbar.set,selectmode="multiple")#selectmode="multiple"
            scrollbar.grid(row=0,rowspan=3,column=2,sticky="ns")
            listbox_4.grid(row=0,rowspan=3,column=1,sticky="nsew")
            scrollbar.config(command=listbox_4.yview)
            food_info_4.grid(row=0,rowspan=3,column=1,columnspan=2)
            tk.Label(basic_info,width=20,text=labeldict[4],font=("微軟正黑體",15)).grid(row=11,column=1,columnspan=2)
        elif text_id==text_5:
            scrollbar=tk.Scrollbar(nutrition_info)
            listbox_5=tk.Listbox(nutrition_info,listvariable=word_5,width=20,height=20,yscrollcommand=scrollbar.set,selectmode="multiple")#selectmode="multiple"
            scrollbar.grid(row=0,rowspan=3,column=2,sticky="ns")
            listbox_5.grid(row=0,rowspan=3,column=1,sticky="nsew")
            scrollbar.config(command=listbox_5.yview)
            food_info_5.grid(row=0,rowspan=3,column=1,columnspan=2)
            tk.Label(basic_info,width=20,text=labeldict[5],font=("微軟正黑體",15)).grid(row=11,column=1,columnspan=2)
'''
        global listbox_meal
        tk.Label(nutrition_info,width=60,text='你選擇的食物有:',font=("微軟正黑體",15)).grid(row=0,column=3,columnspan=2,sticky="nsew")
        # listbox_meal=tk.Listbox(nutrition_info,width=10,height=10,font=("微軟正黑體",15))
        listbox_meal=tk.Listbox(nutrition_info,width=10,height=10,font=("微軟正黑體",15))
        tk.Label(nutrition_info,width=60,text='這些是你選擇的食物!',font=("微軟正黑體",15)).grid(row=2,column=3,columnspan=2,sticky="nsew")
#建立配餐模型之互動式圖層
def MEAL():
    listbox_list=[listbox_0,listbox_1,listbox_2,listbox_3,listbox_4,listbox_5]
    for source in listbox_list:
        selected_food=source.curselection()
        if not selected_food:
            continue
        elif selected_food:
            for i in reversed(selected_food):
                value=source.get(i)
                listbox_meal.insert("active",value)
                # source.delete(i)
    listbox_meal.grid(row=1,column=3,columnspan=2,sticky="nsew")
# label_show_meal=tk.Label(nutrition_info,width=10,height=10,font=("微軟正黑體",15)).grid(row=1,column=3,columnspan=2)       
# listbox_meal=tk.Listbox(nutrition_info,width=10,height=10,font=("微軟正黑體",15)).grid(row=1,column=3,columnspan=2,sticky="w")
'''
def BAR():
    listbox_list=[listbox_0,listbox_1,listbox_2,listbox_3,listbox_4,listbox_5]
    cal_list=[cal_value_0,cal_value_1,cal_value_2,cal_value_3,cal_value_4,cal_value_5]
    water_list=[water_value_0,water_value_1,water_value_2,water_value_3,water_value_4,water_value_5]
    for num,source in enumerate(listbox_list):
        selected_food=source.curselection()
        if not selected_food:
            continue
        elif selected_food:
            calorie_value=0
            water_value=0
            for i in reversed(selected_food):
                value=source.get(i)
                label_show_bar=tk.Label(nutrition_info,text=f"{value} {i}",width=300,height=500)
                calorie_value+=cal_list[num][i]
                water_value+=water_list[num][i]
    bar_canvas=tk.Canvas(label_show_bar,width=400,height=500)
    bar_length_c=round(pow(calorie_value,1/2)*10)
    bar_canvas.create_text(250,10,text="熱量(kcal)",font=("微軟正黑體",15))
    bar_canvas.create_rectangle(225,450,275,450-bar_length_c,fill="yellow",outline='gray80',width=2)
    bar_canvas.create_text(250,450-bar_length_c-10,text=f"{calorie_value} kcal")
    bar_length_w=round(pow(water_value,1/2)*20)
    bar_canvas.create_text(350,10,text="含水量(g)",font=("微軟正黑體",15))
    bar_canvas.create_rectangle(325,450,375,450-bar_length_w,fill="cyan",outline='gray80',width=2)
    bar_canvas.create_text(350,450-bar_length_w-10,text=f"{water_value} g")
    bar_canvas.grid(row=0,column=3,columnspan=3,sticky="nsew")
    label_show_bar.grid(row=0,column=3,columnspan=3,sticky="nsew")
#基本個人資料鍵入
#設定標籤框與輸入框
#依需求建立單選框
#編排畫布結構
label_name=tk.Label(basic_info,width=10,text='稱呼：',font=("微軟正黑體",10)).grid(row=0,column=0,padx=5)
entry_name=tk.Entry(basic_info,width=10,textvariable=name,font=("微軟正黑體",10)).grid(row=0,column=1)

label_sex=tk.Label(basic_info,width=10,text='性別：',font=("微軟正黑體",10)).grid(row=0,column=2)
radio_sexM=tk.Radiobutton(basic_info,width=5,text='男性',variable=sex,value=0,font=("微軟正黑體",10)).grid(row=0,column=3)
radio_sexF=tk.Radiobutton(basic_info,width=5,text='女性',variable=sex,value=1,font=("微軟正黑體",10)).grid(row=0,column=4)

label_weight=tk.Label(basic_info,width=20,text='體重（公斤）：',font=("微軟正黑體",10)).grid(row=2,column=2)
entry_weight=tk.Entry(basic_info,width=20,textvariable=num_weight,font=("微軟正黑體",10)).grid(row=2,column=3,columnspan=2)

label_height=tk.Label(basic_info,width=20,text='身高（公分）：',font=("微軟正黑體",10)).grid(row=1,column=2)
entry_height=tk.Entry(basic_info,width=20,textvariable=num_height,font=("微軟正黑體",10)).grid(row=1,column=3,columnspan=2)

label_age=tk.Label(basic_info,width=10,text='年齡：',font=("微軟正黑體",10)).grid(row=1,column=0,padx=5)
entry_age=tk.Entry(basic_info,width=10,textvariable=num_age,font=("微軟正黑體",10)).grid(row=1,column=1)

label_bfr=tk.Label(basic_info,width=20,text='體脂率數值（％）：',font=("微軟正黑體",10)).grid(row=2,column=0,padx=5)
entry_bfr=tk.Entry(basic_info,width=20,textvariable=num_bfp,font=("微軟正黑體",10)).grid(row=2,column=1)

button_count_bmr=tk.Button(basic_info,width=25,text='計算基礎代謝率',command=BMR,font=("微軟正黑體",15)).grid(row=3,column=0,padx=30,ipadx=15,pady=10,ipady=10)
label_bmr=tk.Label(basic_info,width=60,textvariable=num_bmr,font=("微軟正黑體",15)).grid(row=3,column=1,columnspan=4,ipadx=5,pady=10,ipady=10)

label_pre_factor=tk.Label(basic_info,width=30,text='壓力因子評估：',font=("微軟正黑體",10)).grid(row=4,column=0)
radio_pre1=tk.Radiobutton(basic_info,width=30,text='正常',variable=pre_factor,value=1.0,font=("微軟正黑體",10)).grid(row=5,column=0,columnspan=2,sticky='E')
radio_pre2=tk.Radiobutton(basic_info,width=30,text='生病、發燒',variable=pre_factor,value=1.13,font=("微軟正黑體",10)).grid(row=6,column=0,columnspan=2,sticky='E')
radio_pre3=tk.Radiobutton(basic_info,width=30,text='受傷、手術',variable=pre_factor,value=1.2,font=("微軟正黑體",10)).grid(row=7,column=0,columnspan=2,sticky='E')
radio_pre4=tk.Radiobutton(basic_info,width=30,text='身體痼疾',variable=pre_factor,value=1.4,font=("微軟正黑體",10)).grid(row=8,column=0,columnspan=2,sticky='E')
radio_pre5=tk.Radiobutton(basic_info,width=30,text='燒燙傷',variable=pre_factor,value=1.7,font=("微軟正黑體",10)).grid(row=9,column=0,columnspan=2,sticky='E')

label_act_factor=tk.Label(basic_info,width=30,text='活動因子評估：',font=("微軟正黑體",10)).grid(row=4,column=2)
radio_act1=tk.Radiobutton(basic_info,width=30,text='無活動、幾乎沒運動',variable=act_factor,value=1.2,font=("微軟正黑體",10)).grid(row=5,column=3,columnspan=2)
radio_act2=tk.Radiobutton(basic_info,width=30,text='輕度活動、每週運動1~3天',variable=act_factor,value=1.375,font=("微軟正黑體",10)).grid(row=6,column=3,columnspan=2)
radio_act3=tk.Radiobutton(basic_info,width=30,text='中度活動、每週運動3~5天',variable=act_factor,value=1.55,font=("微軟正黑體",10)).grid(row=7,column=3,columnspan=2)
radio_act4=tk.Radiobutton(basic_info,width=30,text='高度活動、每週運動5~7天',variable=act_factor,value=1.725,font=("微軟正黑體",10)).grid(row=8,column=3,columnspan=2)
radio_act5=tk.Radiobutton(basic_info,width=30,text='超高度活動、幾乎整天都在高強度活動',variable=act_factor,value=1.9,font=("微軟正黑體",10)).grid(row=9,column=3,columnspan=2)

button_count_tdee=tk.Button(basic_info,width=25,text='計算總熱量消耗',command=TDEE,font=("微軟正黑體",15)).grid(row=10,column=0,padx=30,ipadx=15,pady=10,ipady=10)
label_tdee=tk.Label(basic_info,width=60,textvariable=num_tdee,font=("微軟正黑體",15)).grid(row=10,column=1,columnspan=4,ipadx=5,pady=10,ipady=10)

button_show_hexagon=tk.Button(basic_info,width=25,text='顯示需求圖',command=HEXAGON,font=("微軟正黑體",15)).grid(row=11,column=0,padx=30,ipadx=15,pady=10,ipady=10)

button_show_meal=tk.Button(basic_info,width=25,text='顯示食物熱量',command=BAR,font=("微軟正黑體",15)).grid(row=11,column=3,columnspan=2,padx=30,ipadx=15,pady=10,ipady=10)
#建立六邊形互動式圖層之基本變數
#建立貼上畫布之標籤
label_show_hexagon=tk.Label(nutrition_info,width=500,height=500)

hexa_canvas=tk.Canvas(label_show_hexagon,width=500,height=500)
center_x=200
center_y=200
radius=180
points=[]
for p in range(6):
    angle=math.radians(30+60*p)  # Rotate each vertex by 60 degrees
    x=center_x+radius*math.cos(angle)
    y=center_y+radius*math.sin(angle)
    points.extend([x,y])
hexa_canvas.create_polygon(points,outline='black',fill='',width=3)  
hexa_canvas.create_text(200,200,text='六大類食物營養指標',font=("微軟正黑體",25),anchor='center')      

# hexa_canvas.configure(background='gray20')
# label_show_hexagon.configure(background='gray20')

hexa_canvas.grid(row=0,column=0,ipadx=5,pady=10,ipady=10)

label_show_hexagon.grid(row=0,column=0,ipadx=5,pady=10,ipady=10)

#建立輸入listbox資訊之頁面框架
food_info_0=tk.Frame(nutrition_info)
food_info_1=tk.Frame(nutrition_info)
food_info_2=tk.Frame(nutrition_info)
food_info_3=tk.Frame(nutrition_info)
food_info_4=tk.Frame(nutrition_info)
food_info_5=tk.Frame(nutrition_info)
food_info_0.grid(row=0,column=2)
food_info_1.grid(row=0,column=2)
food_info_2.grid(row=0,column=2)
food_info_3.grid(row=0,column=2)
food_info_4.grid(row=0,column=2)
food_info_5.grid(row=0,column=2)
# food_info_0=tk.Frame(nutrition_info,width=100,height=100)
# food_info_1=tk.Frame(nutrition_info,width=100,height=100)
# food_info_2=tk.Frame(nutrition_info,width=100,height=100)
# food_info_3=tk.Frame(nutrition_info,width=100,height=100)
# food_info_4=tk.Frame(nutrition_info,width=100,height=100)
# food_info_5=tk.Frame(nutrition_info,width=100,height=100)
# food_info_0.place(x=450,y=450)
# food_info_1.place(x=450,y=450)
# food_info_2.place(x=450,y=450)
# food_info_3.place(x=450,y=450)
# food_info_4.place(x=450,y=450)
# food_info_5.place(x=450,y=450)
#視覺化顏色設定
# basic_info.configure(bg='gray20')
# nutrition_info.configure(bg='gray20')
# nutri_win.configure(bg='gray20')
#打包輸出置於視窗之上
basic_info.place(x=0,y=0)
# food_info.place(x=30,y=400)
nutrition_info.place(x=0,y=500)
nutri_win.mainloop()